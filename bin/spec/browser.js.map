{
  "version": 3,
  "sources": ["../../test/node_modules/assertion-error/index.js", "../../test/node_modules/pathval/index.js", "../../test/node_modules/chai/lib/chai/utils/flag.js", "../../test/node_modules/chai/lib/chai/utils/test.js", "../../test/node_modules/type-detect/type-detect.js", "../../test/node_modules/chai/lib/chai/utils/expectTypes.js", "../../test/node_modules/chai/lib/chai/utils/getActual.js", "../../test/node_modules/get-func-name/index.js", "../../test/node_modules/chai/lib/chai/utils/getProperties.js", "../../test/node_modules/chai/lib/chai/utils/getEnumerableProperties.js", "../../test/node_modules/chai/lib/chai/config.js", "../../test/node_modules/chai/lib/chai/utils/inspect.js", "../../test/node_modules/chai/lib/chai/utils/objDisplay.js", "../../test/node_modules/chai/lib/chai/utils/getMessage.js", "../../test/node_modules/chai/lib/chai/utils/transferFlags.js", "../../test/node_modules/deep-eql/index.js", "../../test/node_modules/chai/lib/chai/utils/isProxyEnabled.js", "../../test/node_modules/chai/lib/chai/utils/addProperty.js", "../../test/node_modules/chai/lib/chai/utils/addLengthGuard.js", "../../test/node_modules/chai/lib/chai/utils/proxify.js", "../../test/node_modules/chai/lib/chai/utils/addMethod.js", "../../test/node_modules/chai/lib/chai/utils/overwriteProperty.js", "../../test/node_modules/chai/lib/chai/utils/overwriteMethod.js", "../../test/node_modules/chai/lib/chai/utils/addChainableMethod.js", "../../test/node_modules/chai/lib/chai/utils/overwriteChainableMethod.js", "../../test/node_modules/chai/lib/chai/utils/compareByInspect.js", "../../test/node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js", "../../test/node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js", "../../test/node_modules/check-error/index.js", "../../test/node_modules/chai/lib/chai/utils/isNaN.js", "../../test/node_modules/chai/lib/chai/utils/getOperator.js", "../../test/node_modules/chai/lib/chai/utils/index.js", "../../test/node_modules/chai/lib/chai/assertion.js", "../../test/node_modules/chai/lib/chai/core/assertions.js", "../../test/node_modules/chai/lib/chai/interface/expect.js", "../../test/node_modules/chai/lib/chai/interface/should.js", "../../test/node_modules/chai/lib/chai/interface/assert.js", "../../test/node_modules/chai/lib/chai.js", "../../test/node_modules/chai/index.js", "../../node_modules/fn-annotate/index.js", "../../node_modules/util-deprecate/browser.js", "../../node_modules/faunadb/node_modules/chalk/source/index.js", "../../node_modules/boxen/index.js", "../../node_modules/cross-fetch/dist/browser-ponyfill.js", "../../node_modules/faunadb/src/_util.js", "../../node_modules/faunadb/src/Expr.js", "../../node_modules/faunadb/src/errors.js", "../../node_modules/base64-js/index.js", "../../node_modules/util/util.js", "../../node_modules/faunadb/src/values.js", "../../node_modules/object-assign/index.js", "../../node_modules/faunadb/src/query.js", "../../node_modules/faunadb/src/_json.js", "../../node_modules/faunadb/src/PageHelper.js", "../../node_modules/faunadb/src/RequestResult.js", "../../node_modules/faunadb/src/_http/errors.js", "(disabled):http2", "../../node_modules/faunadb/src/_http/http2Adapter.js", "../../node_modules/event-target-shim/src/event.mjs", "../../node_modules/event-target-shim/src/event-target.mjs", "../../node_modules/abort-controller/src/abort-signal.ts", "../../node_modules/abort-controller/src/abort-controller.ts", "../../node_modules/abort-controller/polyfill.js", "(disabled):https", "(disabled):http", "../../node_modules/faunadb/src/_http/fetchAdapter.js", "(disabled):os", "../../node_modules/faunadb/src/_http/index.js", "../../node_modules/faunadb/src/stream.js", "../../node_modules/faunadb/src/Client.js", "../../node_modules/faunadb/src/clientLogger.js", "../../node_modules/faunadb/index.js", "../../test/node_modules/chai/index.mjs", "../../app/globals.ts", "../../app/fun/globalState.ts", "../../app/fun/on.ts", "../../app/dom.ts", "../../app/fun/dom.ts", "../../app/fun/behavior/input.ts", "../../app/fun/behavior/form.ts", "../../test/browser/tests.spec.ts"],
  "sourcesContent": ["/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n", "'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n", "/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n", "/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n", "(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec \u00B11.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec \u00B14.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec \u00B11.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec \u00B11.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec \u00B11.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec \u00B11.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec \u00B11.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec \u00B11.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec \u00B11.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec \u00B10.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec \u00B11.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec \u00B11.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec \u00B10.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec \u00B10.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec \u00B11.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec \u00B12.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec \u00B11.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec \u00B12.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec \u00B12.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec \u00B12.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec \u00B15.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec \u00B14.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec \u00B14.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec \u00B113.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec \u00B11.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec \u00B11.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec \u00B11.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec \u00B11.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec \u00B13.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec \u00B11.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec \u00B11.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec \u00B11.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec \u00B11.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec \u00B12.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec \u00B10.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec \u00B10.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec \u00B14.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec \u00B11.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec \u00B11.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec \u00B11.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec \u00B11.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec \u00B16.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec \u00B12.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec \u00B12.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec \u00B12.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec \u00B11.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec \u00B11.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec \u00B10.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n", "/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n", "/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n", "'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n", "/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n", "/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n", "module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n", "// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      'nodeType' in object &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  var name, nameSuffix;\n\n  // Some type of object without properties can be shortcut.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = ''\n    , array = false\n    , typedArray = false\n    , braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  }\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n\n    case 'bigint':\n      return ctx.stylize(value.toString() + 'n', 'bigint');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n    str += value[i] + ', ';\n  }\n  str += ' ]';\n\n  // Removing trailing `, ` if the array was not truncated\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function(prev, cur) {\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return (typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar)));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n", "/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n", "/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n", "/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n", "'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n", "var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n", "/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n", "var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n", "var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n", "/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n", "/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n", "/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n", "/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n", "/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n", "/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n", "/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n", "/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n", "'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n", "/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n", "var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n", "/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');", "/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n", "/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it\u2019s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toUTCString() + '..' + finish.toUTCString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it\u2019s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return _.eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.3';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n", "module.exports = require('./lib/chai');\n", "'use strict';\n\nmodule.exports = annotate;\n\nfunction annotate(fn) {\n\n  if (typeof fn !== 'function') {\n    throw new Error('Could not parse function signature for injection dependencies: Object is not a function');\n  }\n\n  if (!fn.length) return [];\n\n  var injects = /^()\\(?([^)=]*)\\)? *=>/.exec(fn + '') ||\n                /^[^(]+([^ \\(]*) *\\(([^\\)]*)\\)/.exec(fn + '');\n\n  if (!injects) {\n    throw new Error('Could not parse function signature for injection dependencies: ' + fn + '');\n  }\n\n  var argumentString = injects[2]\n\n  // Strip multi-line comments:\n  // Uses the lazy-quantifier (.*?): http://www.rexegg.com/regex-quantifiers.html#lazy_solution\n  .replace(/\\/\\*[\\S\\s]*?\\*\\//g, ' ')\n\n  // Strip single-line comments:\n  .replace(/\\/\\/.*/g, ' ');\n\n  function groupSubArguments(_, type, keys) {\n    return type + keys.split(',')\n    .map(function (arg) {\n      return arg && arg.trim();\n    })\n    .filter(Boolean)\n    .join('@');\n  }\n\n  argumentString = argumentString.replace(/(\\{)([^}]*)\\}/g, groupSubArguments);\n  argumentString = argumentString.replace(/(\\[)([^}]*)\\]/g, groupSubArguments);\n\n  return argumentString.split(',')\n  .map(function (arg) {\n    return arg && arg.trim();\n  })\n  .map(function (arg) {\n    if (arg[0] === '{') {\n      return arg.substring(1).split('@');\n    }\n    if (arg[0] === '[') {\n      return { items: arg.substring(1).split('@') };\n    }\n    return arg;\n  })\n  .filter(Boolean);\n\n}\n", "\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n", "", "", "var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n", "'use strict'\n\nvar packageJson = require('../package.json')\nvar chalk = require('chalk')\nvar boxen = require('boxen')\n\nvar crossGlobal =\n  typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof global !== 'undefined'\n    ? global\n    : self\n\n/**\n * Inherit the prototype methods from one constructor into another.\n * Source: https://github.com/kaelzhang/node-util-inherits\n * @param {function} ctor Constructor function which needs to inherit the prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n * @private\n */\nfunction inherits(ctor, superCtor) {\n  if (ctor === undefined || ctor === null) {\n    throw new TypeError(\n      'The constructor to \"inherits\" must not be null or undefined'\n    )\n  }\n\n  if (superCtor === undefined || superCtor === null) {\n    throw new TypeError(\n      'The super constructor to \"inherits\" must not be null or undefined'\n    )\n  }\n\n  if (superCtor.prototype === undefined) {\n    throw new TypeError(\n      'The super constructor to \"inherits\" must have a prototype'\n    )\n  }\n\n  ctor.super_ = superCtor\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true,\n    },\n  })\n}\n\n/**\n * Determines if the current environment is a NodeJS environment.\n * @private\n */\nfunction isNodeEnv() {\n  return (\n    typeof window === 'undefined' &&\n    typeof process !== 'undefined' &&\n    process.versions != null &&\n    process.versions.node != null\n  )\n}\n\n/**\n * Resolves environment variable if available.\n *\n * @param {string} envKey A name of env variable.\n * @return {void|string} Returns requested env variable or void.\n * @private\n */\nfunction getEnvVariable(envKey) {\n  var areEnvVarsAvailable = !!(\n    typeof process !== 'undefined' &&\n    process &&\n    process.env\n  )\n\n  if (areEnvVarsAvailable && process.env[envKey] != null) {\n    return process.env[envKey]\n  }\n}\n\n/**\n * JavaScript Client Detection\n * @private\n */\nfunction getBrowserDetails() {\n  var browser = navigator.appName\n  var browserVersion = '' + parseFloat(navigator.appVersion)\n  var nameOffset, verOffset, ix\n\n  // Opera\n  if ((verOffset = navigator.userAgent.indexOf('Opera')) != -1) {\n    browser = 'Opera'\n    browserVersion = navigator.userAgent.substring(verOffset + 6)\n    if ((verOffset = navigator.userAgent.indexOf('Version')) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8)\n    }\n  }\n  // MSIE\n  else if ((verOffset = navigator.userAgent.indexOf('MSIE')) != -1) {\n    browser = 'Microsoft Internet Explorer'\n    browserVersion = navigator.userAgent.substring(verOffset + 5)\n  }\n\n  //IE 11 no longer identifies itself as MS IE, so trap it\n  //http://stackoverflow.com/questions/17907445/how-to-detect-ie11\n  else if (\n    browser == 'Netscape' &&\n    navigator.userAgent.indexOf('Trident/') != -1\n  ) {\n    browser = 'Microsoft Internet Explorer'\n    browserVersion = navigator.userAgent.substring(verOffset + 5)\n    if ((verOffset = navigator.userAgent.indexOf('rv:')) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 3)\n    }\n  }\n\n  // Chrome\n  else if ((verOffset = navigator.userAgent.indexOf('Chrome')) != -1) {\n    browser = 'Chrome'\n    browserVersion = navigator.userAgent.substring(verOffset + 7)\n  }\n  // Safari\n  else if ((verOffset = navigator.userAgent.indexOf('Safari')) != -1) {\n    browser = 'Safari'\n    browserVersion = navigator.userAgent.substring(verOffset + 7)\n    if ((verOffset = navigator.userAgent.indexOf('Version')) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8)\n    }\n\n    // Chrome on iPad identifies itself as Safari. Actual results do not match what Google claims\n    //  at: https://developers.google.com/chrome/mobile/docs/user-agent?hl=ja\n    //  No mention of chrome in the user agent string. However it does mention CriOS, which presumably\n    //  can be keyed on to detect it.\n    if (navigator.userAgent.indexOf('CriOS') != -1) {\n      //Chrome on iPad spoofing Safari...correct it.\n      browser = 'Chrome'\n      //Don't believe there is a way to grab the accurate version number, so leaving that for now.\n    }\n  }\n  // Firefox\n  else if ((verOffset = navigator.userAgent.indexOf('Firefox')) != -1) {\n    browser = 'Firefox'\n    browserVersion = navigator.userAgent.substring(verOffset + 8)\n  }\n  // Other browsers\n  else if (\n    (nameOffset = navigator.userAgent.lastIndexOf(' ') + 1) <\n    (verOffset = navigator.userAgent.lastIndexOf('/'))\n  ) {\n    browser = navigator.userAgent.substring(nameOffset, verOffset)\n    browserVersion = navigator.userAgent.substring(verOffset + 1)\n    if (browser.toLowerCase() == browser.toUpperCase()) {\n      browser = navigator.appName\n    }\n  }\n  // trim the browser version string\n  if ((ix = browserVersion.indexOf(';')) != -1)\n    browserVersion = browserVersion.substring(0, ix)\n  if ((ix = browserVersion.indexOf(' ')) != -1)\n    browserVersion = browserVersion.substring(0, ix)\n  if ((ix = browserVersion.indexOf(')')) != -1)\n    browserVersion = browserVersion.substring(0, ix)\n\n  return [browser, browserVersion].join('-')\n}\n\nfunction getBrowserOsDetails() {\n  var os = 'unknown'\n  var clientStrings = [\n    { s: 'Windows 10', r: /(Windows 10.0|Windows NT 10.0)/ },\n    { s: 'Windows 8.1', r: /(Windows 8.1|Windows NT 6.3)/ },\n    { s: 'Windows 8', r: /(Windows 8|Windows NT 6.2)/ },\n    { s: 'Windows 7', r: /(Windows 7|Windows NT 6.1)/ },\n    { s: 'Windows Vista', r: /Windows NT 6.0/ },\n    { s: 'Windows Server 2003', r: /Windows NT 5.2/ },\n    { s: 'Windows XP', r: /(Windows NT 5.1|Windows XP)/ },\n    { s: 'Windows 2000', r: /(Windows NT 5.0|Windows 2000)/ },\n    { s: 'Windows ME', r: /(Win 9x 4.90|Windows ME)/ },\n    { s: 'Windows 98', r: /(Windows 98|Win98)/ },\n    { s: 'Windows 95', r: /(Windows 95|Win95|Windows_95)/ },\n    { s: 'Windows NT 4.0', r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/ },\n    { s: 'Windows CE', r: /Windows CE/ },\n    { s: 'Windows 3.11', r: /Win16/ },\n    { s: 'Android', r: /Android/ },\n    { s: 'Open BSD', r: /OpenBSD/ },\n    { s: 'Sun OS', r: /SunOS/ },\n    { s: 'Chrome OS', r: /CrOS/ },\n    { s: 'Linux', r: /(Linux|X11(?!.*CrOS))/ },\n    { s: 'iOS', r: /(iPhone|iPad|iPod)/ },\n    { s: 'Mac OS X', r: /Mac OS X/ },\n    { s: 'Mac OS', r: /(Mac OS|MacPPC|MacIntel|Mac_PowerPC|Macintosh)/ },\n    { s: 'QNX', r: /QNX/ },\n    { s: 'UNIX', r: /UNIX/ },\n    { s: 'BeOS', r: /BeOS/ },\n    { s: 'OS/2', r: /OS\\/2/ },\n    {\n      s: 'Search Bot',\n      r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/,\n    },\n  ]\n  for (var id in clientStrings) {\n    var cs = clientStrings[id]\n    if (cs.r.test(navigator.userAgent)) {\n      os = cs.s\n      break\n    }\n  }\n\n  var osVersion = 'unknown'\n\n  if (/Windows/.test(os)) {\n    osVersion = /Windows (.*)/.exec(os)[1]\n    os = 'Windows'\n  }\n\n  switch (os) {\n    case 'Mac OS':\n    case 'Mac OS X':\n    case 'Android':\n      osVersion = /(?:Android|Mac OS|Mac OS X|MacPPC|MacIntel|Mac_PowerPC|Macintosh) ([\\.\\_\\d]+)/.exec(\n        navigator.userAgent\n      )[1]\n      break\n\n    case 'iOS':\n      osVersion = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(navigator.appVersion)\n      osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0)\n      break\n  }\n  return [os, osVersion].join('-')\n}\n\n/**\n * For checking process.env always use `hasOwnProperty`\n * Some providers could throw an error when trying to access env variables that does not exists\n * @private */\nfunction getNodeRuntimeEnv() {\n  var runtimeEnvs = [\n    {\n      name: 'Netlify',\n      check: function() {\n        return process.env.hasOwnProperty('NETLIFY_IMAGES_CDN_DOMAIN')\n      },\n    },\n    {\n      name: 'Vercel',\n      check: function() {\n        return process.env.hasOwnProperty('VERCEL')\n      },\n    },\n    {\n      name: 'Heroku',\n      check: function() {\n        return (\n          process.env.hasOwnProperty('PATH') &&\n          process.env.PATH.indexOf('.heroku') !== -1\n        )\n      },\n    },\n    {\n      name: 'AWS Lambda',\n      check: function() {\n        return process.env.hasOwnProperty('AWS_LAMBDA_FUNCTION_VERSION')\n      },\n    },\n    {\n      name: 'GCP Cloud Functions',\n      check: function() {\n        return (\n          process.env.hasOwnProperty('_') &&\n          process.env._.indexOf('google') !== -1\n        )\n      },\n    },\n    {\n      name: 'GCP Compute Instances',\n      check: function() {\n        return process.env.hasOwnProperty('GOOGLE_CLOUD_PROJECT')\n      },\n    },\n    {\n      name: 'Azure Cloud Functions',\n      check: function() {\n        return process.env.hasOwnProperty(\n          'WEBSITE_FUNCTIONS_AZUREMONITOR_CATEGORIES'\n        )\n      },\n    },\n    {\n      name: 'Azure Compute',\n      check: function() {\n        return (\n          process.env.hasOwnProperty('ORYX_ENV_TYPE') &&\n          process.env.hasOwnProperty('WEBSITE_INSTANCE_ID') &&\n          process.env.ORYX_ENV_TYPE === 'AppService'\n        )\n      },\n    },\n    {\n      name: 'Mongo Stitch',\n      check: function() {\n        return typeof crossGlobal.StitchError === 'function'\n      },\n    },\n    {\n      name: 'Render',\n      check: function() {\n        return process.env.hasOwnProperty('RENDER_SERVICE_ID')\n      },\n    },\n    {\n      name: 'Begin',\n      check: function() {\n        return process.env.hasOwnProperty('BEGIN_DATA_SCOPE_ID')\n      },\n    },\n  ]\n  var detectedEnv = runtimeEnvs.find(env => env.check())\n\n  return detectedEnv ? detectedEnv.name : 'unknown'\n}\n\n/**\n * If defined, returns the given value. Otherwise, returns the default value.\n * @param {any} obj The given value.\n * @param {any} def The default value.\n * @private\n */\nfunction defaults(obj, def) {\n  if (obj === undefined) {\n    return def\n  } else {\n    return obj\n  }\n}\n\n/**\n * Used for functions that take an options objects.\n * Fills in defaults for options not provided.\n * Throws errors for provided options that aren't recognized.\n * A default value of `undefined` is used to indicate that the option must be provided.\n * @private\n */\nfunction applyDefaults(provided, defaults) {\n  var out = {}\n\n  for (var providedKey in provided) {\n    if (!(providedKey in defaults)) {\n      throw new Error('No such option ' + providedKey)\n    }\n    out[providedKey] = provided[providedKey]\n  }\n\n  for (var defaultsKey in defaults) {\n    if (!(defaultsKey in out)) {\n      out[defaultsKey] = defaults[defaultsKey]\n    }\n  }\n\n  return out\n}\n\n/**\n * Returns a new object without any keys where the value would be null or undefined.\n * @private\n * */\nfunction removeNullAndUndefinedValues(object) {\n  var res = {}\n  for (var key in object) {\n    var val = object[key]\n    if (val !== null && val !== undefined) {\n      res[key] = val\n    }\n  }\n  return res\n}\n\n/**\n * Returns a new object without any keys where the value would be undefined.\n * @private\n * */\nfunction removeUndefinedValues(object) {\n  var res = {}\n  for (var key in object) {\n    var val = object[key]\n    if (val !== undefined) {\n      res[key] = val\n    }\n  }\n  return res\n}\n\n/**\n * Returns a boolean stating if the given object has a given property\n * @private\n * */\nfunction checkInstanceHasProperty(obj, prop) {\n  return typeof obj === 'object' && obj !== null && Boolean(obj[prop])\n}\n\nfunction formatUrl(base, path, query) {\n  query = typeof query === 'object' ? querystringify(query) : query\n  return [\n    base,\n    path ? (path.charAt(0) === '/' ? '' : '/' + path) : '',\n    query ? (query.charAt(0) === '?' ? '' : '?' + query) : '',\n  ].join('')\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || ''\n\n  var pairs = [],\n    value,\n    key\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?'\n\n  for (key in obj) {\n    if (checkInstanceHasProperty(obj, key)) {\n      value = obj[key]\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undefined || isNaN(value))) {\n        value = ''\n      }\n\n      key = encode(key)\n      value = encode(value)\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue\n      pairs.push(key + '=' + value)\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : ''\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input)\n  } catch (e) {\n    return null\n  }\n}\n\n/**\n * Merge two objects into one\n * @param obj1\n * @param obj2\n * @returns obj3 a new object based on obj1 and obj2\n */\nfunction mergeObjects(obj1, obj2) {\n  var obj3 = {}\n  for (var attrname in obj1) {\n    obj3[attrname] = obj1[attrname]\n  }\n  for (var attrname in obj2) {\n    obj3[attrname] = obj2[attrname]\n  }\n  return obj3\n}\n\n/**\n * Resolves which Fetch API compatible function to use. If an override is\n * provided, returns the override. If no override and the global (window) has\n * \"fetch\" property, return the native fetch. Otherwise returns the cross-fetch polyfill.\n *\n * @param {?function} fetchOverride An Fetch API compatible function to use.\n * @returns {function} A Fetch API compatible function.\n * @private\n */\nfunction resolveFetch(fetchOverride) {\n  if (typeof fetchOverride === 'function') {\n    return fetchOverride\n  }\n\n  if (typeof crossGlobal.fetch === 'function') {\n    // NB. Rebinding to global is needed for Safari\n    return crossGlobal.fetch.bind(crossGlobal)\n  }\n\n  return require('cross-fetch')\n}\n\nfunction notifyAboutNewVersion() {\n  var isNotified\n  const checkAndNotify = checkNewVersion => {\n    if (!isNodeEnv() || isNotified || !checkNewVersion) return\n    function onResponse(latestVersion) {\n      var isNewVersionAvailable = latestVersion > packageJson.version\n      if (isNewVersionAvailable) {\n        console.info(\n          boxen(\n            'New ' +\n              packageJson.name +\n              ' version available ' +\n              chalk.dim(packageJson.version) +\n              chalk.reset(' \u2192 ') +\n              chalk.green(latestVersion) +\n              `\\nChangelog: https://github.com/${packageJson.repository}/blob/main/CHANGELOG.md`,\n            { padding: 1, borderColor: 'yellow' }\n          )\n        )\n      }\n    }\n\n    isNotified = true\n    resolveFetch()('https://registry.npmjs.org/' + packageJson.name)\n      .then(resp => resp.json())\n      .then(json => onResponse(json['dist-tags'].latest))\n      .catch(err => {\n        console.error('Unable to check new driver version')\n        console.error(err)\n      })\n  }\n\n  return checkAndNotify\n}\n\nmodule.exports = {\n  notifyAboutNewVersion: notifyAboutNewVersion,\n  crossGlobal: crossGlobal,\n  mergeObjects: mergeObjects,\n  formatUrl: formatUrl,\n  querystringify: querystringify,\n  inherits: inherits,\n  isNodeEnv: isNodeEnv,\n  getEnvVariable: getEnvVariable,\n  defaults: defaults,\n  applyDefaults: applyDefaults,\n  removeNullAndUndefinedValues: removeNullAndUndefinedValues,\n  removeUndefinedValues: removeUndefinedValues,\n  checkInstanceHasProperty: checkInstanceHasProperty,\n  getBrowserDetails: getBrowserDetails,\n  getBrowserOsDetails: getBrowserOsDetails,\n  getNodeRuntimeEnv: getNodeRuntimeEnv,\n  resolveFetch: resolveFetch,\n}\n", "'use strict'\n\nvar util = require('./_util')\n\n/**\n * A representation of a FaunaDB Query Expression. Generally, you shouldn't need\n * to use this class directly; use the Query helpers defined in {@link module:query}.\n *\n * @param {Object} obj The object that represents a Query to be treated as an Expression.\n * @constructor\n */\nfunction Expr(obj) {\n  this.raw = obj\n}\n\nExpr.prototype._isFaunaExpr = true\n\nExpr.prototype.toJSON = function() {\n  return this.raw\n}\n\nExpr.prototype.toFQL = function() {\n  return exprToString(this.raw)\n}\n\nvar varArgsFunctions = [\n  'Do',\n  'Call',\n  'Union',\n  'Intersection',\n  'Difference',\n  'Equals',\n  'Add',\n  'BitAnd',\n  'BitOr',\n  'BitXor',\n  'Divide',\n  'Max',\n  'Min',\n  'Modulo',\n  'Multiply',\n  'Subtract',\n  'LT',\n  'LTE',\n  'GT',\n  'GTE',\n  'And',\n  'Or',\n]\n\n// FQL function names come across the wire as all lowercase letters\n// (like the key of this object). Not all are properly snake-cased\n// on the Core side, which causes improper capitalizations.\n//\n// JS Driver patch: https://faunadb.atlassian.net/browse/FE-540\n// Core update: https://faunadb.atlassian.net/browse/ENG-2110\n\nvar specialCases = {\n  containsstrregex: 'ContainsStrRegex',\n  endswith: 'EndsWith',\n  findstr: 'FindStr',\n  findstrregex: 'FindStrRegex',\n  gt: 'GT',\n  gte: 'GTE',\n  is_nonempty: 'is_non_empty',\n  lowercase: 'LowerCase',\n  lt: 'LT',\n  lte: 'LTE',\n  ltrim: 'LTrim',\n  ngram: 'NGram',\n  rtrim: 'RTrim',\n  regexescape: 'RegexEscape',\n  replacestr: 'ReplaceStr',\n  replacestrregex: 'ReplaceStrRegex',\n  startswith: 'StartsWith',\n  substring: 'SubString',\n  titlecase: 'TitleCase',\n  uppercase: 'UpperCase',\n}\n\n/**\n *\n * @param {Expr} expression A FQL expression\n * @returns {Boolean} Returns true for valid expressions\n * @private\n */\nfunction isExpr(expression) {\n  return (\n    expression instanceof Expr ||\n    util.checkInstanceHasProperty(expression, '_isFaunaExpr')\n  )\n}\n\n/**\n *\n * @param {Object} obj An object to print\n * @returns {String} String representation of object\n * @private\n */\nfunction printObject(obj) {\n  return (\n    '{' +\n    Object.keys(obj)\n      .map(function(k) {\n        return '\"' + k + '\"' + ': ' + exprToString(obj[k])\n      })\n      .join(', ') +\n    '}'\n  )\n}\n\n/**\n *\n * @param {Array} arr An array to print\n * @param {Function} toStr Function used for stringification\n * @returns {String} String representation of array\n * @private\n */\nfunction printArray(arr, toStr) {\n  return arr\n    .map(function(item) {\n      return toStr(item)\n    })\n    .join(', ')\n}\n\n/**\n *\n * @param {String} fn A snake-case FQL function name\n * @returns {String} The correpsonding camel-cased FQL function name\n * @private\n */\nfunction convertToCamelCase(fn) {\n  // For FQL functions with special formatting concerns, we\n  // use the specialCases object above to define their casing.\n  if (fn in specialCases) fn = specialCases[fn]\n\n  return fn\n    .split('_')\n    .map(function(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1)\n    })\n    .join('')\n}\n\nvar exprToString = function(expr, caller) {\n  // If expr is a Expr, we want to parse expr.raw instead\n  if (isExpr(expr)) {\n    if ('value' in expr) return expr.toString()\n    expr = expr.raw\n  }\n\n  // Return early to avoid extra work if null\n  if (expr === null) {\n    return 'null'\n  }\n\n  // Return stringified value if expression is not an Object or Array\n  switch (typeof expr) {\n    case 'string':\n      return JSON.stringify(expr)\n    case 'symbol':\n    case 'number':\n    case 'boolean':\n      return expr.toString()\n    case 'undefined':\n      return 'undefined'\n  }\n\n  // Handle expression Arrays\n  if (Array.isArray(expr)) {\n    var array = printArray(expr, exprToString)\n    return varArgsFunctions.indexOf(caller) != -1 ? array : '[' + array + ']'\n  }\n\n  // Parse expression Objects\n  if ('match' in expr) {\n    var matchStr = exprToString(expr['match'])\n    var terms = expr['terms'] || []\n\n    if (isExpr(terms)) terms = terms.raw\n\n    if (Array.isArray(terms) && terms.length == 0)\n      return 'Match(' + matchStr + ')'\n\n    if (Array.isArray(terms)) {\n      return (\n        'Match(' + matchStr + ', [' + printArray(terms, exprToString) + '])'\n      )\n    }\n\n    return 'Match(' + matchStr + ', ' + exprToString(terms) + ')'\n  }\n\n  if ('paginate' in expr) {\n    var exprKeys = Object.keys(expr)\n    if (exprKeys.length === 1) {\n      return 'Paginate(' + exprToString(expr['paginate']) + ')'\n    }\n\n    var expr2 = Object.assign({}, expr)\n    delete expr2['paginate']\n\n    return (\n      'Paginate(' +\n      exprToString(expr['paginate']) +\n      ', ' +\n      printObject(expr2) +\n      ')'\n    )\n  }\n\n  if ('let' in expr && 'in' in expr) {\n    var letExpr = ''\n\n    if (Array.isArray(expr['let']))\n      letExpr = '[' + printArray(expr['let'], printObject) + ']'\n    else letExpr = printObject(expr['let'])\n\n    return 'Let(' + letExpr + ', ' + exprToString(expr['in']) + ')'\n  }\n\n  if ('object' in expr) return printObject(expr['object'])\n\n  if ('merge' in expr) {\n    if (expr.lambda) {\n      return (\n        'Merge(' +\n        exprToString(expr.merge) +\n        ', ' +\n        exprToString(expr.with) +\n        ', ' +\n        exprToString(expr.lambda) +\n        ')'\n      )\n    }\n\n    return (\n      'Merge(' + exprToString(expr.merge) + ', ' + exprToString(expr.with) + ')'\n    )\n  }\n\n  if ('lambda' in expr) {\n    return (\n      'Lambda(' +\n      exprToString(expr['lambda']) +\n      ', ' +\n      exprToString(expr['expr']) +\n      ')'\n    )\n  }\n\n  if ('filter' in expr) {\n    return (\n      'Filter(' +\n      exprToString(expr['collection']) +\n      ', ' +\n      exprToString(expr['filter']) +\n      ')'\n    )\n  }\n\n  if ('call' in expr) {\n    return (\n      'Call(' +\n      exprToString(expr['call']) +\n      ', ' +\n      exprToString(expr['arguments']) +\n      ')'\n    )\n  }\n\n  if ('map' in expr) {\n    return (\n      'Map(' +\n      exprToString(expr['collection']) +\n      ', ' +\n      exprToString(expr['map']) +\n      ')'\n    )\n  }\n\n  if ('foreach' in expr) {\n    return (\n      'Foreach(' +\n      exprToString(expr['collection']) +\n      ', ' +\n      exprToString(expr['foreach']) +\n      ')'\n    )\n  }\n\n  var keys = Object.keys(expr)\n  var fn = keys[0]\n  fn = convertToCamelCase(fn)\n\n  // The filter prevents zero arity functions from having a null argument\n  // This only works under the assumptions\n  // that there are no functions where a single 'null' argument makes sense.\n  var args = keys\n    .filter(k => expr[k] !== null || keys.length > 1)\n    .map(k => exprToString(expr[k], fn))\n    .join(', ')\n\n  return fn + '(' + args + ')'\n}\n\nExpr.toString = exprToString\n\nmodule.exports = Expr\n", "'use strict'\n\nvar util = require('./_util')\n\n/**\n * FaunaDB error types. Request errors can originate from the client (e.g. bad\n * method parameters) or from the FaunaDB Server (e.g. invalid queries,\n * timeouts.) Server errors will subclass {@link module:errors~FaunaHTTPError}.\n * Stream errors will subclass {@link module:errors~StreamError}.\n *\n * @module errors\n */\n\n/**\n * The base exception type for all FaunaDB errors.\n *\n * @param {string} message\n * @extends Error\n * @constructor\n */\nfunction FaunaError(name, message, description) {\n  Error.call(this)\n\n  /**\n   * Name of this exception.\n   * @type {string}\n   */\n  this.name = name\n\n  /**\n   * Message for this exception.\n   * @type {string}\n   */\n  this.message = message\n\n  /**\n   * Description for this exception.\n   * @type {string}\n   */\n  this.description = description\n}\n\nutil.inherits(FaunaError, Error)\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidValue(message) {\n  FaunaError.call(this, 'InvalidValue', message)\n}\n\nutil.inherits(InvalidValue, FaunaError)\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidArity(min, max, actual, callerFunc) {\n  var arityInfo = `${callerFunc} function requires ${messageForArity(\n    min,\n    max\n  )} argument(s) but ${actual} were given`\n  var documentationLink = logDocumentationLink(callerFunc)\n\n  FaunaError.call(this, 'InvalidArity', `${arityInfo}\\n${documentationLink}`)\n\n  /**\n   * Minimum number of arguments.\n   * @type {number}\n   */\n  this.min = min\n\n  /**\n   * Maximum number of arguments.\n   * @type {number}\n   */\n  this.max = max\n\n  /**\n   * Actual number of arguments called with.\n   * @type {number}\n   */\n  this.actual = actual\n\n  function messageForArity(min, max) {\n    if (max === null) return 'at least ' + min\n    if (min === null) return 'up to ' + max\n    if (min === max) return min\n    return 'from ' + min + ' to ' + max\n  }\n\n  function logDocumentationLink(functionName) {\n    var docsURL = 'https://docs.fauna.com/fauna/current/api/fql/functions/'\n    return `For more info, see the docs: ${docsURL}${functionName.toLowerCase()}`\n  }\n}\n\nutil.inherits(InvalidArity, FaunaError)\n\n/**\n * Base exception type for errors returned by the FaunaDB server.\n *\n * @param {RequestResult} requestResult\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction FaunaHTTPError(name, requestResult) {\n  var response = requestResult.responseContent\n  var errors = response.errors\n  var message = errors.length === 0 ? '(empty \"errors\")' : errors[0].code\n  var description =\n    errors.length === 0 ? '(empty \"errors\")' : errors[0].description\n  FaunaError.call(this, name, message, description)\n\n  /**\n   * A wrapped {@link RequestResult} object, containing the request and response\n   * context of the failed request.\n   *\n   * @type {RequestResult}\n   */\n  this.requestResult = requestResult\n}\n\nutil.inherits(FaunaHTTPError, FaunaError)\n\n/**\n * Convenience method to return the errors from the response object.\n *\n * @returns {Object}\n */\nFaunaHTTPError.prototype.errors = function() {\n  return this.requestResult.responseContent.errors\n}\n\n/**\n * Takes a {@link RequestResult} and throws an appropriate exception if\n * it contains a failed request.\n *\n * @param requestResult {RequestResult}\n */\nFaunaHTTPError.raiseForStatusCode = function(requestResult) {\n  var code = requestResult.statusCode\n  if (code < 200 || code >= 300) {\n    switch (code) {\n      case 400:\n        throw new BadRequest(requestResult)\n      case 401:\n        throw new Unauthorized(requestResult)\n      case 403:\n        throw new PermissionDenied(requestResult)\n      case 404:\n        throw new NotFound(requestResult)\n      case 405:\n        throw new MethodNotAllowed(requestResult)\n      case 429:\n        throw new TooManyRequests(requestResult)\n      case 500:\n        throw new InternalError(requestResult)\n      case 503:\n        throw new UnavailableError(requestResult)\n      default:\n        throw new FaunaHTTPError('UnknownError', requestResult)\n    }\n  }\n}\n\n/**\n * A HTTP 400 error.\n *\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction BadRequest(requestResult) {\n  FaunaHTTPError.call(this, 'BadRequest', requestResult)\n}\n\nutil.inherits(BadRequest, FaunaHTTPError)\n\n/**\n * A HTTP 401 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction Unauthorized(requestResult) {\n  FaunaHTTPError.call(this, 'Unauthorized', requestResult)\n}\n\nutil.inherits(Unauthorized, FaunaHTTPError)\n\n/**\n * A HTTP 403 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction PermissionDenied(requestResult) {\n  FaunaHTTPError.call(this, 'PermissionDenied', requestResult)\n}\n\nutil.inherits(PermissionDenied, FaunaHTTPError)\n\n/**\n * A HTTP 404 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction NotFound(requestResult) {\n  FaunaHTTPError.call(this, 'NotFound', requestResult)\n}\n\nutil.inherits(NotFound, FaunaHTTPError)\n\n/**\n * A HTTP 405 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction MethodNotAllowed(requestResult) {\n  FaunaHTTPError.call(this, 'MethodNotAllowed', requestResult)\n}\n\nutil.inherits(MethodNotAllowed, FaunaHTTPError)\n\n/**\n * A HTTP 429 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction TooManyRequests(requestResult) {\n  FaunaHTTPError.call(this, 'TooManyRequests', requestResult)\n}\n\nutil.inherits(TooManyRequests, FaunaHTTPError)\n\n/**\n * A HTTP 500 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction InternalError(requestResult) {\n  FaunaHTTPError.call(this, 'InternalError', requestResult)\n}\n\nutil.inherits(InternalError, FaunaHTTPError)\n\n/**\n * A HTTP 503 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction UnavailableError(requestResult) {\n  FaunaHTTPError.call(this, 'UnavailableError', requestResult)\n}\n\nutil.inherits(UnavailableError, FaunaHTTPError)\n\n/**\n * The base exception type for all stream related errors.\n *\n * @constructor\n * @param {string} name The error class name.\n * @param {string} message The error message.\n * @param {string} description The error detailed description.\n * @extends module:errors~FaunaError\n */\nfunction StreamError(name, message, description) {\n  FaunaError.call(this, name, message, description)\n}\n\nutil.inherits(StreamError, FaunaError)\n\n/**\n * An error thrown by the client when streams are not supported by the current\n * platform.\n *\n * @constructor\n * @param {string} description The error description.\n * @extends module:errors~StreamError\n */\nfunction StreamsNotSupported(description) {\n  FaunaError.call(\n    this,\n    'StreamsNotSupported',\n    'streams not supported',\n    description\n  )\n}\n\nutil.inherits(StreamsNotSupported, StreamError)\n\n/**\n * An Error thrown by the server when something wrong happened with the\n * subscribed stream.\n * @constructor\n * @param {Object} event The error event.\n * @property {Object} event The error event.\n * @extends module:errors~StreamError\n */\nfunction StreamErrorEvent(event) {\n  var error = event.data || {}\n  FaunaError.call(this, 'StreamErrorEvent', error.code, error.description)\n  this.event = event\n}\n\nutil.inherits(StreamErrorEvent, StreamError)\n\n/**\n * An error thrown when attempting to operate on a closed Client instance.\n *\n * @param {string} message The error message.\n * @param {?string} description The error description.\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction ClientClosed(message, description) {\n  FaunaError.call(this, 'ClientClosed', message, description)\n}\n\nutil.inherits(ClientClosed, FaunaError)\n\nmodule.exports = {\n  FaunaError: FaunaError,\n  ClientClosed: ClientClosed,\n  FaunaHTTPError: FaunaHTTPError,\n  InvalidValue: InvalidValue,\n  InvalidArity: InvalidArity,\n  BadRequest: BadRequest,\n  Unauthorized: Unauthorized,\n  PermissionDenied: PermissionDenied,\n  NotFound: NotFound,\n  MethodNotAllowed: MethodNotAllowed,\n  TooManyRequests: TooManyRequests,\n  InternalError: InternalError,\n  UnavailableError: UnavailableError,\n  StreamError: StreamError,\n  StreamsNotSupported: StreamsNotSupported,\n  StreamErrorEvent: StreamErrorEvent,\n}\n", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "", "'use strict'\n\nvar base64 = require('base64-js')\nvar deprecate = require('util-deprecate')\nvar errors = require('./errors')\nvar Expr = require('./Expr')\nvar util = require('./_util')\nvar nodeUtil = util.isNodeEnv() ? require('util') : null\n\nvar customInspect = nodeUtil && nodeUtil.inspect.custom\nvar stringify = nodeUtil ? nodeUtil.inspect : JSON.stringify\n\n/**\n * FaunaDB value types. Generally, these collections do not need to be instantiated\n * directly; they can be constructed through helper methods in {@link module:query}.\n *\n * Instances of these collections will be returned in responses if the response object\n * contains these values. For example, a FaunaDB response containing\n *`{ \"@ref\": { \"id\": \"123\", \"collection\": { \"@ref\": { \"id\": \"frogs\", \"collection\": { \"@ref\": { \"id\": \"collectiones\" } } } } } }`\n * will be returned as `new values.Ref(\"123\", new values.Ref(\"frogs\", values.Native.COLLECTIONS))`.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi#simple-type)\n * for more information.\n *\n * @module values\n */\n\n/**\n * Base type for FaunaDB value objects.\n *\n * @extends Expr\n * @abstract\n * @constructor\n */\nfunction Value() {}\n\nValue.prototype._isFaunaValue = true\n\nutil.inherits(Value, Expr)\n\n/**\n * FaunaDB ref.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string} id\n *   The id portion of the ref.\n * @param {Ref} [collection]\n *   The collection portion of the ref.\n * @param {Ref} [database]\n *   The database portion of the ref.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction Ref(id, collection, database) {\n  if (!id) throw new errors.InvalidValue('id cannot be null or undefined')\n\n  this.value = { id: id }\n  if (collection) this.value['collection'] = collection\n  if (database) this.value['database'] = database\n}\n\nRef.prototype._isFaunaRef = true\n\nutil.inherits(Ref, Value)\n\n/**\n * Gets the collection part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#collection\n */\nObject.defineProperty(Ref.prototype, 'collection', {\n  get: function() {\n    return this.value['collection']\n  },\n})\n\n/**\n * DEPRECATED. Gets the class part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#class\n */\nObject.defineProperty(Ref.prototype, 'class', {\n  get: deprecate(function() {\n    return this.value['collection']\n  }, 'class is deprecated, use collection instead'),\n})\n\n/**\n * Gets the database part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#database\n */\nObject.defineProperty(Ref.prototype, 'database', {\n  get: function() {\n    return this.value['database']\n  },\n})\n\n/**\n * Gets the id part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#id\n */\nObject.defineProperty(Ref.prototype, 'id', {\n  get: function() {\n    return this.value['id']\n  },\n})\n\n/** @ignore */\nRef.prototype.toJSON = function() {\n  return { '@ref': this.value }\n}\n\nwrapToString(Ref, function() {\n  var constructors = {\n    collections: 'Collection',\n    databases: 'Database',\n    indexes: 'Index',\n    functions: 'Function',\n    roles: 'Role',\n    access_providers: 'AccessProvider',\n  }\n\n  var isNative = function(ref) {\n    return ref.collection === undefined\n  }\n\n  var toString = function(ref) {\n    if (isNative(ref)) {\n      var db = ref.database !== undefined ? ref.database.toString() : ''\n\n      if (ref.id === 'access_providers') return 'AccessProviders(' + db + ')'\n\n      return ref.id.charAt(0).toUpperCase() + ref.id.slice(1) + '(' + db + ')'\n    }\n\n    if (isNative(ref.collection)) {\n      var constructor = constructors[ref.collection.id]\n      if (constructor !== undefined) {\n        var db =\n          ref.database !== undefined ? ', ' + ref.database.toString() : ''\n        return constructor + '(\"' + ref.id + '\"' + db + ')'\n      }\n    }\n\n    return 'Ref(' + toString(ref.collection) + ', \"' + ref.id + '\")'\n  }\n\n  return toString(this)\n})\n\n/** @ignore */\nRef.prototype.valueOf = function() {\n  return this.value\n}\n\n/**\n * Whether these are both Refs and have the same value.\n * @param {any} other\n * @returns {boolean}\n */\nRef.prototype.equals = function(other) {\n  return (\n    (other instanceof Ref ||\n      util.checkInstanceHasProperty(other, '_isFaunaRef')) &&\n    this.id === other.id &&\n    ((this.collection === undefined && other.collection === undefined) ||\n      this.collection.equals(other.collection)) &&\n    ((this.database === undefined && other.database === undefined) ||\n      this.database.equals(other.database))\n  )\n}\n\nvar Native = {\n  COLLECTIONS: new Ref('collections'),\n  INDEXES: new Ref('indexes'),\n  DATABASES: new Ref('databases'),\n  FUNCTIONS: new Ref('functions'),\n  ROLES: new Ref('roles'),\n  KEYS: new Ref('keys'),\n  ACCESS_PROVIDERS: new Ref('access_providers'),\n}\n\nNative.fromName = function(name) {\n  switch (name) {\n    case 'collections':\n      return Native.COLLECTIONS\n    case 'indexes':\n      return Native.INDEXES\n    case 'databases':\n      return Native.DATABASES\n    case 'functions':\n      return Native.FUNCTIONS\n    case 'roles':\n      return Native.ROLES\n    case 'keys':\n      return Native.KEYS\n    case 'access_providers':\n      return Native.ACCESS_PROVIDERS\n  }\n  return new Ref(name)\n}\n\n/**\n * FaunaDB Set.\n * This represents a set returned as part of a response.\n * This looks like `{\"@set\": set_query}`.\n * For query sets see {@link match}, {@link union},\n * {@link intersection}, {@link difference}, and {@link join}.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction SetRef(value) {\n  /** Raw query object. */\n  this.value = value\n}\n\nutil.inherits(SetRef, Value)\n\nwrapToString(SetRef, function() {\n  return Expr.toString(this.value)\n})\n\n/** @ignore */\nSetRef.prototype.toJSON = function() {\n  return { '@set': this.value }\n}\n\n/** FaunaDB time. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value If a Date, this is converted to a string.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaTime(value) {\n  if (value instanceof Date) {\n    value = value.toISOString()\n  } else if (!(value.charAt(value.length - 1) === 'Z')) {\n    throw new errors.InvalidValue(\"Only allowed timezone is 'Z', got: \" + value)\n  }\n\n  this.value = value\n}\n\nutil.inherits(FaunaTime, Value)\n\n/**\n * Returns the date wrapped by this object.\n * This is lossy as Dates have millisecond rather than nanosecond precision.\n *\n * @member {Date}\n * @name module:values~FaunaTime#date\n */\nObject.defineProperty(FaunaTime.prototype, 'date', {\n  get: function() {\n    return new Date(this.value)\n  },\n})\n\nwrapToString(FaunaTime, function() {\n  return 'Time(\"' + this.value + '\")'\n})\n\n/** @ignore */\nFaunaTime.prototype.toJSON = function() {\n  return { '@ts': this.value }\n}\n\n/** FaunaDB date. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value\n *   If a Date, this is converted to a string, with time-of-day discarded.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaDate(value) {\n  if (value instanceof Date) {\n    // The first 10 characters 'YYYY-MM-DD' are the date portion.\n    value = value.toISOString().slice(0, 10)\n  }\n\n  /**\n   * ISO8601 date.\n   * @type {string}\n   */\n  this.value = value\n}\n\nutil.inherits(FaunaDate, Value)\n\n/**\n * @member {Date}\n * @name module:values~FaunaDate#date\n */\nObject.defineProperty(FaunaDate.prototype, 'date', {\n  get: function() {\n    return new Date(this.value)\n  },\n})\n\nwrapToString(FaunaDate, function() {\n  return 'Date(\"' + this.value + '\")'\n})\n\n/** @ignore */\nFaunaDate.prototype.toJSON = function() {\n  return { '@date': this.value }\n}\n\n/** FaunaDB bytes. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {Uint8Array|ArrayBuffer|string} value\n *    If ArrayBuffer it's converted to Uint8Array\n *    If string it must be base64 encoded and it's converted to Uint8Array\n * @extends module:values~Value\n * @constructor\n */\nfunction Bytes(value) {\n  if (value instanceof ArrayBuffer) {\n    this.value = new Uint8Array(value)\n  } else if (typeof value === 'string') {\n    this.value = base64.toByteArray(value)\n  } else if (value instanceof Uint8Array) {\n    this.value = value\n  } else {\n    throw new errors.InvalidValue(\n      'Bytes type expect argument to be either Uint8Array|ArrayBuffer|string, got: ' +\n        stringify(value)\n    )\n  }\n}\n\nutil.inherits(Bytes, Value)\n\nwrapToString(Bytes, function() {\n  return 'Bytes(\"' + base64.fromByteArray(this.value) + '\")'\n})\n\n/** @ignore */\nBytes.prototype.toJSON = function() {\n  return { '@bytes': base64.fromByteArray(this.value) }\n}\n\n/** FaunaDB query. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {any} value\n * @extends module:values~Value\n * @constructor\n */\nfunction Query(value) {\n  this.value = value\n}\n\nutil.inherits(Query, Value)\n\nwrapToString(Query, function() {\n  return 'Query(' + Expr.toString(this.value) + ')'\n})\n\n/** @ignore */\nQuery.prototype.toJSON = function() {\n  return { '@query': this.value }\n}\n\n/** @ignore */\nfunction wrapToString(type, fn) {\n  type.prototype.toString = fn\n  type.prototype.inspect = fn\n\n  if (customInspect) {\n    type.prototype[customInspect] = fn\n  }\n}\n\nmodule.exports = {\n  Value: Value,\n  Ref: Ref,\n  Native: Native,\n  SetRef: SetRef,\n  FaunaTime: FaunaTime,\n  FaunaDate: FaunaDate,\n  Bytes: Bytes,\n  Query: Query,\n}\n", "/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n", "'use strict'\n\nvar annotate = require('fn-annotate')\nvar deprecate = require('util-deprecate')\nvar Expr = require('./Expr')\nvar errors = require('./errors')\nvar values = require('./values')\nvar objectAssign = require('object-assign')\nvar util = require('./_util')\n\n/**\n * This module contains functions used to construct FaunaDB Queries.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi)\n * for per-function documentation.\n *\n * @module query\n */\n\n/**\n * @typedef {(Expr|string|number|boolean|Object)} module:query~ExprTerm\n */\n\n/**\n * @typedef {(module:query~ExprTerm|Array<module:query~ExprTerm>)} module:query~ExprArg\n */\n\n// Type helpers\n\n/**\n * If one parameter is provided, constructs a literal Ref value.\n * The string `collections/widget/123` will be equivalent to `new values.Ref('123', new values.Ref('widget', values.Native.COLLECTIONS))`\n *\n * If two are provided, constructs a Ref() function that, when evaluated, returns a Ref value.\n *\n * @param {string|module:query~ExprArg} ref|cls\n *   Alone, the ref in path form. Combined with `id`, must be a collection ref.\n * @param {module:query~ExprArg} [id]\n *   A numeric id of the given collection.\n * @return {Expr}\n */\nfunction Ref() {\n  arity.between(1, 2, arguments, Ref.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ '@ref': wrap(arguments[0]) })\n    case 2:\n      return new Expr({ ref: wrap(arguments[0]), id: wrap(arguments[1]) })\n  }\n}\n\n/**\n * @param {Uint8Array|ArrayBuffer|module:query~ExprArg} bytes\n *   A base64 encoded string or a byte array\n * @return {Expr}\n */\nfunction Bytes(bytes) {\n  arity.exact(1, arguments, Bytes.name)\n  return new values.Bytes(bytes)\n}\n\n// Basic forms\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} msg\n *   The message to send back to the client.\n * @return {Expr}\n * */\nfunction Abort(msg) {\n  arity.exact(1, arguments, Abort.name)\n  return new Expr({ abort: wrap(msg) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} timestamp\n *   An Expr that will evaluate to a Time.\n * @param {module:query~ExprArg} expr\n *   The Expr to run at the given snapshot time.\n * @return {Expr}\n * */\nfunction At(timestamp, expr) {\n  arity.exact(2, arguments, At.name)\n  return new Expr({ at: wrap(timestamp), expr: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} bindings\n *   A set of bindings to use within the given expression.\n * @param {module:query~ExprArg} in\n *   The expression to run with the given bindings.\n * @return {Expr}\n * */\nfunction Let(vars, expr) {\n  arity.exact(2, arguments, Let.name)\n  var bindings = []\n\n  if (Array.isArray(vars)) {\n    bindings = vars.map(function(item) {\n      return wrapValues(item)\n    })\n  } else {\n    bindings = Object.keys(vars)\n      .filter(function(k) {\n        return vars[k] !== undefined\n      })\n      .map(function(k) {\n        var b = {}\n        b[k] = wrap(vars[k])\n        return b\n      })\n  }\n\n  if (typeof expr === 'function') {\n    if (Array.isArray(vars)) {\n      var expr_vars = []\n\n      vars.forEach(function(item) {\n        Object.keys(item).forEach(function(name) {\n          expr_vars.push(Var(name))\n        })\n      })\n\n      expr = expr.apply(null, expr_vars)\n    } else {\n      expr = expr.apply(\n        null,\n        Object.keys(vars).map(function(name) {\n          return Var(name)\n        })\n      )\n    }\n  }\n\n  return new Expr({ let: bindings, in: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} varName\n *   The name of the bound var.\n * @return {Expr}\n * */\nfunction Var(varName) {\n  arity.exact(1, arguments, Var.name)\n  return new Expr({ var: wrap(varName) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} condition\n *   An expression that returns a boolean.\n * @param {module:query~ExprArg} then\n *   The expression to run if condition is true.\n * @param {module:query~ExprArg} else\n *   The expression to run if the condition is false.\n * @return {Expr}\n * */\nfunction If(condition, then, _else) {\n  arity.exact(3, arguments, If.name)\n  return new Expr({ if: wrap(condition), then: wrap(then), else: wrap(_else) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} args\n *   A series of expressions to run.\n * @return {Expr}\n * */\nfunction Do() {\n  arity.min(1, arguments, Do.name)\n  var args = argsToArray(arguments)\n  return new Expr({ do: wrap(args) })\n}\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} fields\n *   The object to be escaped.\n * @return {Expr}\n * */\nvar objectFunction = function(fields) {\n  arity.exact(1, arguments, objectFunction.name)\n  return new Expr({ object: wrapValues(fields) })\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Directly produces a FaunaDB Lambda expression as described in the FaunaDB reference\n * documentation.\n *\n * @param {module:query~ExprArg} var\n *   The names of the variables to be bound in this lambda expression.\n * @param {module:query~ExprArg} expr\n *   The lambda expression.\n * @return {Expr}\n */\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Takes a Javascript function, and will transform it\n * into the appropriate FaunaDB query. For example:\n *\n * ```\n * Lambda(function(a) { return Add(a, a); });\n * // Returns { lambda: 'a', expr: { add: [{ var: a }, { var: a }] } }\n * ```\n * Note that the driver will handle wrapping all usages of the lambda's bound\n * variables with the {@link modules:query~Var} function.\n *\n * @param {function} func\n *   Takes the provided function and produces the appropriate FaunaDB query expression.\n * @return {Expr}\n *\n */ function Lambda() {\n  arity.between(1, 2, arguments, Lambda.name)\n  switch (arguments.length) {\n    case 1:\n      var value = arguments[0]\n      if (typeof value === 'function') {\n        return _lambdaFunc(value)\n      } else if (\n        value instanceof Expr ||\n        util.checkInstanceHasProperty(value, '_isFaunaExpr')\n      ) {\n        return value\n      } else {\n        throw new errors.InvalidValue(\n          'Lambda function takes either a Function or an Expr.'\n        )\n      }\n    case 2:\n      var var_name = arguments[0]\n      var expr = arguments[1]\n\n      return _lambdaExpr(var_name, expr)\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaFunc(func) {\n  var vars = annotate(func)\n  switch (vars.length) {\n    case 0:\n      throw new errors.InvalidValue(\n        'Provided Function must take at least 1 argument.'\n      )\n    case 1:\n      return _lambdaExpr(vars[0], func(Var(vars[0])))\n    default:\n      return _lambdaExpr(\n        vars,\n        func.apply(\n          null,\n          vars.map(function(name) {\n            return Var(name)\n          })\n        )\n      )\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaExpr(var_name, expr) {\n  return new Expr({ lambda: wrap(var_name), expr: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Invokes a given function passing in the provided arguments\n *\n * ```\n * Call(Ref(\"functions/a_function\"), 1, 2)\n * ```\n *\n * @param {module:query~ExprArg} ref\n *   The ref of the UserDefinedFunction to call\n * @param {...module:query~ExprArg} args\n *   A series of values to pass as arguments to the UDF.\n * @return {Expr}\n * */\nfunction Call(ref) {\n  arity.min(1, arguments, Call.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ call: wrap(ref), arguments: wrap(varargs(args)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Constructs a `@query` type using the Lambda() or a function.\n *\n * ```\n * Query(Lambda(['a', 'b'], Add(Var('a'), Var('b'))))\n * Query(function (a, b) { return Add(a, b) })\n * ```\n *\n * @param {module:query~ExprArg|function} lambda\n *   A function to escape as a query.\n * @return {Expr}\n * */\nfunction Query(lambda) {\n  arity.exact(1, arguments, Query.name)\n  return new Expr({ query: wrap(lambda) })\n}\n\n// Collection functions\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be mapped over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Map(collection, lambda_expr) {\n  arity.exact(2, arguments, Map.name)\n  return new Expr({ map: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be iterated over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Foreach(collection, lambda_expr) {\n  arity.exact(2, arguments, Foreach.name)\n  return new Expr({ foreach: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be filtered.\n * @param {module:query~ExprArg|function} lambda\n *   A function that returns a boolean used to filter unwanted values.\n * @return {Expr}\n * */\nfunction Filter(collection, lambda_expr) {\n  arity.exact(2, arguments, Filter.name)\n  return new Expr({ filter: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to take from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Take(number, collection) {\n  arity.exact(2, arguments, Take.name)\n  return new Expr({ take: wrap(number), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to drop from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Drop(number, collection) {\n  arity.exact(2, arguments, Drop.name)\n  return new Expr({ drop: wrap(number), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to prepend to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Prepend(elements, collection) {\n  arity.exact(2, arguments, Prepend.name)\n  return new Expr({ prepend: wrap(elements), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to append to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Append(elements, collection) {\n  arity.exact(2, arguments, Append.name)\n  return new Expr({ append: wrap(elements), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsEmpty(collection) {\n  arity.exact(1, arguments, IsEmpty.name)\n  return new Expr({ is_empty: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsNonEmpty(collection) {\n  arity.exact(1, arguments, IsNonEmpty.name)\n  return new Expr({ is_nonempty: wrap(collection) })\n}\n\n// Type check functions\n\n/**\n * Check if the expression is a number.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnumber\">IsNumber</a>\n */\nfunction IsNumber(expr) {\n  arity.exact(1, arguments, IsNumber.name)\n  return new Expr({ is_number: wrap(expr) })\n}\n\n/**\n * Check if the expression is a double.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdouble\">IsDouble</a>\n */\nfunction IsDouble(expr) {\n  arity.exact(1, arguments, IsDouble.name)\n  return new Expr({ is_double: wrap(expr) })\n}\n\n/**\n * Check if the expression is an integer.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isinteger\">IsInteger</a>\n */\nfunction IsInteger(expr) {\n  arity.exact(1, arguments, IsInteger.name)\n  return new Expr({ is_integer: wrap(expr) })\n}\n\n/**\n * Check if the expression is a boolean.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isboolean\">IsBoolean</a>\n */\nfunction IsBoolean(expr) {\n  arity.exact(1, arguments, IsBoolean.name)\n  return new Expr({ is_boolean: wrap(expr) })\n}\n\n/**\n * Check if the expression is null.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnull\">IsNull</a>\n */\nfunction IsNull(expr) {\n  arity.exact(1, arguments, IsNull.name)\n  return new Expr({ is_null: wrap(expr) })\n}\n\n/**\n * Check if the expression is a byte array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isbytes\">IsBytes</a>\n */\nfunction IsBytes(expr) {\n  arity.exact(1, arguments, IsBytes.name)\n  return new Expr({ is_bytes: wrap(expr) })\n}\n\n/**\n * Check if the expression is a timestamp.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istimestamp\">IsTimestamp</a>\n */\nfunction IsTimestamp(expr) {\n  arity.exact(1, arguments, IsTimestamp.name)\n  return new Expr({ is_timestamp: wrap(expr) })\n}\n\n/**\n * Check if the expression is a date.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdate\">IsDate</a>\n */\nfunction IsDate(expr) {\n  arity.exact(1, arguments, IsDate.name)\n  return new Expr({ is_date: wrap(expr) })\n}\n\n/**\n * Check if the expression is a string.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isstring\">IsString</a>\n */\nfunction IsString(expr) {\n  arity.exact(1, arguments, IsString.name)\n  return new Expr({ is_string: wrap(expr) })\n}\n\n/**\n * Check if the expression is an array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isarray\">IsArray</a>\n */\nfunction IsArray(expr) {\n  arity.exact(1, arguments, IsArray.name)\n  return new Expr({ is_array: wrap(expr) })\n}\n\n/**\n * Check if the expression is an object.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isobject\">IsObject</a>\n */\nfunction IsObject(expr) {\n  arity.exact(1, arguments, IsObject.name)\n  return new Expr({ is_object: wrap(expr) })\n}\n\n/**\n * Check if the expression is a reference.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isref\">IsRef</a>\n */\nfunction IsRef(expr) {\n  arity.exact(1, arguments, IsRef.name)\n  return new Expr({ is_ref: wrap(expr) })\n}\n\n/**\n * Check if the expression is a set.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isset\">IsSet</a>\n */\nfunction IsSet(expr) {\n  arity.exact(1, arguments, IsSet.name)\n  return new Expr({ is_set: wrap(expr) })\n}\n\n/**\n * Check if the expression is a document (either a reference or an instance).\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdoc\">IsDoc</a>\n */\nfunction IsDoc(expr) {\n  arity.exact(1, arguments, IsDoc.name)\n  return new Expr({ is_doc: wrap(expr) })\n}\n\n/**\n * Check if the expression is a lambda.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/islambda\">IsLambda</a>\n */\nfunction IsLambda(expr) {\n  arity.exact(1, arguments, IsLambda.name)\n  return new Expr({ is_lambda: wrap(expr) })\n}\n\n/**\n * Check if the expression is a collection.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscollection\">IsCollection</a>\n */\nfunction IsCollection(expr) {\n  arity.exact(1, arguments, IsCollection.name)\n  return new Expr({ is_collection: wrap(expr) })\n}\n\n/**\n * Check if the expression is a database.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdatabase\">IsDatabase</a>\n */\nfunction IsDatabase(expr) {\n  arity.exact(1, arguments, IsDatabase.name)\n  return new Expr({ is_database: wrap(expr) })\n}\n\n/**\n * Check if the expression is an index.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isindex\">IsIndex</a>\n */\nfunction IsIndex(expr) {\n  arity.exact(1, arguments, IsIndex.name)\n  return new Expr({ is_index: wrap(expr) })\n}\n\n/**\n * Check if the expression is a function.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isfunction\">IsFunction</a>\n */\nfunction IsFunction(expr) {\n  arity.exact(1, arguments, IsFunction.name)\n  return new Expr({ is_function: wrap(expr) })\n}\n\n/**\n * Check if the expression is a key.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iskey\">IsKey</a>\n */\nfunction IsKey(expr) {\n  arity.exact(1, arguments, IsKey.name)\n  return new Expr({ is_key: wrap(expr) })\n}\n\n/**\n * Check if the expression is a token.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istoken\">IsToken</a>\n */\nfunction IsToken(expr) {\n  arity.exact(1, arguments, IsToken.name)\n  return new Expr({ is_token: wrap(expr) })\n}\n\n/**\n * Check if the expression is credentials.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscredentials\">IsCredentials</a>\n */\nfunction IsCredentials(expr) {\n  arity.exact(1, arguments, IsCredentials.name)\n  return new Expr({ is_credentials: wrap(expr) })\n}\n\n/**\n * Check if the expression is a role.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isrole\">IsRole</a>\n */\nfunction IsRole(expr) {\n  arity.exact(1, arguments, IsRole.name)\n  return new Expr({ is_role: wrap(expr) })\n}\n\n// Read functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in either a Ref or SetRef.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to get the document.\n * @return {Expr}\n */\nfunction Get(ref, ts) {\n  arity.between(1, 2, arguments, Get.name)\n  ts = util.defaults(ts, null)\n\n  return new Expr(params({ get: wrap(ref) }, { ts: wrap(ts) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} secret\n *   The key or token secret to lookup.\n * @return {Expr}\n */\nfunction KeyFromSecret(secret) {\n  arity.exact(1, arguments, KeyFromSecret.name)\n  return new Expr({ key_from_secret: wrap(secret) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/reduce).\n *\n * @param {module:query~ExprArg} lambda\n *   The accumulator function\n * @param {module:query~ExprArg} initial\n *   The initial value\n * @param {module:query~ExprArg} collection\n *   The colleciton to be reduced\n * @return {Expr}\n */\nfunction Reduce(lambda, initial, collection) {\n  arity.exact(3, arguments, Reduce.name)\n  return new Expr({\n    reduce: wrap(lambda),\n    initial: wrap(initial),\n    collection: wrap(collection),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * You may want to utilize {@link Client#paginate} to obtain a {@link PageHelper},\n * rather than using this query function directly.\n *\n * @param {module:query~ExprArg} set\n *   An expression resulting in a SetRef to page over.\n * @param {?Object} opts\n *  An object representing options for pagination.\n *    - size: Maximum number of results to return.\n *    - after: Return the next page of results after this cursor (inclusive).\n *    - before: Return the previous page of results before this cursor (exclusive).\n *    - sources: If true, include the source sets along with each element.\n * @return {Expr}\n */\nfunction Paginate(set, opts) {\n  arity.between(1, 2, arguments, Paginate.name)\n  opts = util.defaults(opts, {})\n\n  return new Expr(objectAssign({ paginate: wrap(set) }, wrapValues(opts)))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in a Ref.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to check for the document's existence.\n * @return {Expr}\n */\nfunction Exists(ref, ts) {\n  arity.between(1, 2, arguments, Exists.name)\n  ts = util.defaults(ts, null)\n\n  return new Expr(params({ exists: wrap(ref) }, { ts: wrap(ts) }))\n}\n\n// Write functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref (usually a CollectionRef) to create.\n * @param {?module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Create(collection_ref, params) {\n  arity.between(1, 2, arguments, Create.name)\n  return new Expr({ create: wrap(collection_ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to update.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Update(ref, params) {\n  arity.exact(2, arguments, Update.name)\n  return new Expr({ update: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to replace.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Replace(ref, params) {\n  arity.exact(2, arguments, Replace.name)\n  return new Expr({ replace: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to delete.\n * @return {Expr}\n */\nfunction Delete(ref) {\n  arity.exact(1, arguments, Delete.name)\n  return new Expr({ delete: wrap(ref) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to insert against\n * @param {module:query~ExprArg} ts\n *   The valid time of the inserted event\n * @param {module:query~ExprArg} action\n *   Whether the event should be a Create, Update, or Delete.\n * @param {module:query~ExprArg} params\n *   If this is a Create or Update, the parameters of the document.\n * @return {Expr}\n */\nfunction Insert(ref, ts, action, params) {\n  arity.exact(4, arguments, Insert.name)\n  return new Expr({\n    insert: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action),\n    params: wrap(params),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document whose event should be removed.\n * @param {module:query~ExprArg} ts\n *   The valid time of the event.\n * @param {module:query~ExprArg} action\n *   The event action (Create, Update, or Delete) that should be removed.\n * @return {Expr}\n */\nfunction Remove(ref, ts, action) {\n  arity.exact(3, arguments, Remove.name)\n  return new Expr({ remove: wrap(ref), ts: wrap(ts), action: wrap(action) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a class.\n *     - name (required): the name of the class to create\n * @return {Expr}\n *\n * @deprecated use CreateCollection instead\n */\nfunction CreateClass(params) {\n  arity.exact(1, arguments, CreateClass.name)\n  return new Expr({ create_class: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a collection.\n *     - name (required): the name of the collection to create\n * @return {Expr}\n */\nfunction CreateCollection(params) {\n  arity.exact(1, arguments, CreateCollection.name)\n  return new Expr({ create_collection: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a database.\n *     - name (required): the name of the database to create\n * @return {Expr}\n */\nfunction CreateDatabase(params) {\n  arity.exact(1, arguments, CreateDatabase.name)\n  return new Expr({ create_database: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create an index.\n *     - name (required): the name of the index to create\n *     - source: One or more source objects describing source collections and (optional) field bindings.\n *     - terms: An array of term objects describing the fields to be indexed. Optional\n *     - values: An array of value objects describing the fields to be covered. Optional\n *     - unique: If true, maintains a uniqueness constraint on combined terms and values. Optional\n *     - partitions: The number of sub-partitions within each term. Optional\n * @return {Expr}\n */\nfunction CreateIndex(params) {\n  arity.exact(1, arguments, CreateIndex.name)\n  return new Expr({ create_index: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new key\n *     - database: Ref of the database the key will be scoped to. Optional.\n *     - role: The role of the new key\n * @return {Expr}\n */\nfunction CreateKey(params) {\n  arity.exact(1, arguments, CreateKey.name)\n  return new Expr({ create_key: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new user defined function.\n *     - name: The name of the function\n *     - body: A lambda function (escaped with `query`).\n * @return {Expr}\n */\nfunction CreateFunction(params) {\n  arity.exact(1, arguments, CreateFunction.name)\n  return new Expr({ create_function: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new role.\n *     - name: The name of the role\n *     - privileges: An array of privileges\n *     - membership: An array of membership bindings\n * @return {Expr}\n */\nfunction CreateRole(params) {\n  arity.exact(1, arguments, CreateRole.name)\n  return new Expr({ create_role: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new access provider.\n *     - name: A valid schema name\n *     - issuer: A unique string\n *     - jwks_uri: A valid HTTPS URI\n *     - roles: An array of role/predicate pairs where the predicate returns a boolean.\n *                   The array can also contain Role references.\n * @return {Expr}\n */\nfunction CreateAccessProvider(params) {\n  arity.exact(1, arguments, CreateAccessProvider.name)\n  return new Expr({ create_access_provider: wrap(params) })\n}\n\n// Sets\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document for which to retrieve the singleton set.\n * @return {Expr}\n */\nfunction Singleton(ref) {\n  arity.exact(1, arguments, Singleton.name)\n  return new Expr({ singleton: wrap(ref) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref or SetRef to retrieve an event set from.\n * @return {Expr}\n */\nfunction Events(ref_set) {\n  arity.exact(1, arguments, Events.name)\n  return new Expr({ events: wrap(ref_set) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} index\n *   The Ref of the index to match against.\n * @param {...module:query~ExprArg} terms\n *   A list of terms used in the match.\n * @return {Expr}\n */\nfunction Match(index) {\n  arity.min(1, arguments, Match.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ match: wrap(index), terms: wrap(varargs(args)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to union together.\n * @return {Expr}\n */\nfunction Union() {\n  arity.min(1, arguments, Union.name)\n  return new Expr({ union: wrap(varargs(arguments)) })\n}\n\n/**\n * Merge two or more objects..\n *\n * @param {...module:query~ExprArg} merge merge the first object.\n * @param {...module:query~ExprArg} _with the second object or a list of objects\n * @param {...module:query~ExprArg} lambda a lambda to resolve possible conflicts\n * @return {Expr}\n * */\nfunction Merge(merge, _with, lambda) {\n  arity.between(2, 3, arguments, Merge.name)\n  return new Expr(\n    params({ merge: wrap(merge), with: wrap(_with) }, { lambda: wrap(lambda) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to intersect.\n * @return {Expr}\n * */\nfunction Intersection() {\n  arity.min(1, arguments, Intersection.name)\n  return new Expr({ intersection: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to diff.\n * @return {Expr}\n * */\nfunction Difference() {\n  arity.min(1, arguments, Difference.name)\n  return new Expr({ difference: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef to remove duplicates from.\n * @return {Expr}\n * */\nfunction Distinct(set) {\n  arity.exact(1, arguments, Distinct.name)\n  return new Expr({ distinct: wrap(set) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} source\n *   A SetRef of the source set\n * @param {module:query~ExprArg|function} target\n *   A Lambda that will accept each element of the source Set and return a Set\n * @return {Expr}\n */\nfunction Join(source, target) {\n  arity.exact(2, arguments, Join.name)\n  return new Expr({ join: wrap(source), with: wrap(target) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/range).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef of the source set\n * @param {module:query~ExprArg} from\n *   The lower bound\n * @param {module:query~ExprArg} to\n *   The upper bound\n * @return {Expr}\n */\nfunction Range(set, from, to) {\n  arity.exact(3, arguments, Range.name)\n  return new Expr({ range: wrap(set), from: wrap(from), to: wrap(to) })\n}\n\n// Authentication\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref with credentials to authenticate against\n * @param {module:query~ExprArg} params\n *   An object of parameters to pass to the login function\n *     - password: The password used to login\n * @return {Expr}\n * */\nfunction Login(ref, params) {\n  arity.exact(2, arguments, Login.name)\n  return new Expr({ login: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} delete_tokens\n *   If true, log out all tokens associated with the current session.\n * @return {Expr}\n */\nfunction Logout(delete_tokens) {\n  arity.exact(1, arguments, Logout.name)\n  return new Expr({ logout: wrap(delete_tokens) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to check the password against.\n * @param {module:query~ExprArg} password\n *   The credentials password to check.\n * @return {Expr}\n */\nfunction Identify(ref, password) {\n  arity.exact(2, arguments, Identify.name)\n  return new Expr({ identify: wrap(ref), password: wrap(password) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction Identity() {\n  arity.exact(0, arguments, Identity.name)\n  return new Expr({ identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentIdentity() {\n  arity.exact(0, arguments, CurrentIdentity.name)\n  return new Expr({ current_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasIdentity() {\n  arity.exact(0, arguments, HasIdentity.name)\n  return new Expr({ has_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\nfunction HasCurrentIdentity() {\n  arity.exact(0, arguments, HasCurrentIdentity.name)\n  return new Expr({ has_current_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentToken() {\n  arity.exact(0, arguments, CurrentToken.name)\n  return new Expr({ current_token: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasCurrentToken() {\n  arity.exact(0, arguments, HasCurrentToken.name)\n  return new Expr({ has_current_token: null })\n}\n\n// String functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} strings - A list of strings to concatenate.\n * @param {string} separator  - The separator to use between each string.\n * @return {string} a single combined string\n */\nfunction Concat(strings, separator) {\n  arity.min(1, arguments, Concat.name)\n  separator = util.defaults(separator, null)\n  return new Expr(\n    params({ concat: wrap(strings) }, { separator: wrap(separator) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} string - The string to casefold.\n * @param {string} normalizer - The algorithm to use. One of: NFKCCaseFold, NFC, NFD, NFKC, NFKD.\n * @return {string} a normalized string\n */\nfunction Casefold(string, normalizer) {\n  arity.min(1, arguments, Casefold.name)\n  return new Expr(\n    params({ casefold: wrap(string) }, { normalizer: wrap(normalizer) })\n  )\n}\n\n/**\n * Returns true if the string contains the given substring, or false if otherwise\n *\n * @param {string} value  - the string to evaluate\n * @param {string} search - the substring to search for\n * @return {boolean}      - was the search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstr\">FaunaDB ContainsStr Function</a>\n */\nfunction ContainsStr(value, search) {\n  arity.exact(2, arguments, ContainsStr.name)\n  return new Expr({ containsstr: wrap(value), search: wrap(search) })\n}\n\n/**\n * Returns true if the string contains the given pattern, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} pattern - the pattern to search for\n * @return {boolean}       - was the regex search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstrregex\">FaunaDB ContainsStrRegex Function</a>\n */\nfunction ContainsStrRegex(value, pattern) {\n  arity.exact(2, arguments, ContainsStrRegex.name)\n  return new Expr({ containsstrregex: wrap(value), pattern: wrap(pattern) })\n}\n\n/**\n * Returns true if the string starts with the given prefix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the prefix to search for\n * @return {boolean}       - does `value` start with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/startswith\">FaunaDB StartsWith Function</a>\n */\nfunction StartsWith(value, search) {\n  arity.exact(2, arguments, StartsWith.name)\n  return new Expr({ startswith: wrap(value), search: wrap(search) })\n}\n\n/**\n * Returns true if the string ends with the given suffix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the suffix to search for\n * @return {boolean}       - does `value` end with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/endswith\">FaunaDB EndsWith Function</a>\n */\nfunction EndsWith(value, search) {\n  arity.exact(2, arguments, EndsWith.name)\n  return new Expr({ endswith: wrap(value), search: wrap(search) })\n}\n\n/**\n * It takes a string and returns a regex which matches the input string verbatim.\n *\n * @param value      - the string to analyze\n * @return {string}  - a regex which matches the input string verbatim\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/regexescape\">FaunaDB RegexEscape Function</a>\n */\nfunction RegexEscape(value) {\n  arity.exact(1, arguments, RegexEscape.name)\n  return new Expr({ regexescape: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - Find the first position of this string in the search string\n * @param {int} start - An optional start offset into the search string\n * @return {int} location of the found string or -1 if not found\n */\nfunction FindStr(value, find, start) {\n  arity.between(2, 3, arguments, FindStr.name)\n  start = util.defaults(start, null)\n  return new Expr(\n    params({ findstr: wrap(value), find: wrap(find) }, { start: wrap(start) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - Find the first position of this pattern in the search string using a java regular expression syntax\n * @param {int} start - An optional start offset into the search string\n * @param {int} numResults - An optional number of results to return, max 1024\n * @return {Array} an array of object describing where the search pattern was located\n */\nfunction FindStrRegex(value, pattern, start, numResults) {\n  arity.between(2, 4, arguments, FindStrRegex.name)\n  start = util.defaults(start, null)\n  return new Expr(\n    params(\n      { findstrregex: wrap(value), pattern: wrap(pattern) },\n      { start: wrap(start), num_results: wrap(numResults) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to calculate the length in codepoints.\n * @return {int} the length of the string in codepoints\n */\nfunction Length(value) {\n  arity.exact(1, arguments, Length.name)\n  return new Expr({ length: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to LowerCase.\n * @return {string} the string converted to lowercase\n */\nfunction LowerCase(value) {\n  arity.exact(1, arguments, LowerCase.name)\n  return new Expr({ lowercase: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to trim leading white space.\n * @return {string} the string with leading white space removed\n */\nfunction LTrim(value) {\n  arity.exact(1, arguments, LTrim.name)\n  return new Expr({ ltrim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {module:query~ExprArg} terms\n *   A document from which to produce ngrams.\n * @param {?Object} opts\n *   An object of options\n *     - min: The minimum ngram size.\n *     - max: The maximum ngram size.\n * @return {Array|Value}\n */\nfunction NGram(terms, min, max) {\n  arity.between(1, 3, arguments, NGram.name)\n  min = util.defaults(min, null)\n  max = util.defaults(max, null)\n\n  return new Expr(\n    params({ ngram: wrap(terms) }, { min: wrap(min), max: wrap(max) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to repeat.\n * @param {int} number - The number of times to repeat the string\n * @return {string} a string which was repeated\n */\nfunction Repeat(value, number) {\n  arity.between(1, 2, arguments, Repeat.name)\n  number = util.defaults(number, null)\n  return new Expr(params({ repeat: wrap(value) }, { number: wrap(number) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - The string to find in the search string\n * @param {string} replace - The string to replace in the search string\n * @return {String} all the occurrences of find substituted with replace string\n */\nfunction ReplaceStr(value, find, replace) {\n  arity.exact(3, arguments, ReplaceStr.name)\n  return new Expr({\n    replacestr: wrap(value),\n    find: wrap(find),\n    replace: wrap(replace),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - The pattern to find in the search string using a java regular expression syntax\n * @param {string} replace - The string to replace in the search string\n * @param {boolean} first - Replace all or just the first\n * @return {string} all the occurrences of find pattern substituted with replace string\n */\nfunction ReplaceStrRegex(value, pattern, replace, first) {\n  arity.between(3, 4, arguments, ReplaceStrRegex.name)\n  first = util.defaults(first, null)\n  return new Expr(\n    params(\n      {\n        replacestrregex: wrap(value),\n        pattern: wrap(pattern),\n        replace: wrap(replace),\n      },\n      { first: wrap(first) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to remove white space from the end.\n * @return {string} the string with trailing whitespaces removed\n */\nfunction RTrim(value) {\n  arity.exact(1, arguments, RTrim.name)\n  return new Expr({ rtrim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {int} num - The string of N Space(s).\n * @return {string} a string with spaces\n */\nfunction Space(num) {\n  arity.exact(1, arguments, Space.name)\n  return new Expr({ space: wrap(num) })\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value  The string to SubString.\n * @param {int} start  The position the first character of the return string begins at\n * @param {int} length  An optional length, if omitted then returns to the end of string\n * @return {string}\n */\nfunction SubString(value, start, length) {\n  arity.between(1, 3, arguments, SubString.name)\n  start = util.defaults(start, null)\n  length = util.defaults(length, null)\n  return new Expr(\n    params(\n      { substring: wrap(value) },\n      { start: wrap(start), length: wrap(length) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to TitleCase.\n * @return {string}  A string converted to titlecase\n */\nfunction TitleCase(value) {\n  arity.exact(1, arguments, TitleCase.name)\n  return new Expr({ titlecase: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Trim.\n * @return {string} a string with leading and trailing whitespace removed\n */\nfunction Trim(value) {\n  arity.exact(1, arguments, Trim.name)\n  return new Expr({ trim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Uppercase.\n * @return {string} An uppercase string\n */\nfunction UpperCase(value) {\n  arity.exact(1, arguments, UpperCase.name)\n  return new Expr({ uppercase: wrap(value) })\n}\n\n/**\n * Format values into a string.\n *\n * @param  {string}  string string with format specifiers\n * @param  {array}   values list of values to format\n * @return {string}         a string\n */\nfunction Format(string) {\n  arity.min(1, arguments, Format.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ format: wrap(string), values: wrap(varargs(args)) })\n}\n\n// Time and date functions\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to converted to a time object.\n * @return {Expr}\n */\nfunction Time(string) {\n  arity.exact(1, arguments, Time.name)\n  return new Expr({ time: wrap(string) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} number\n *   The number of `unit`s from Epoch\n * @param {module:query~ExprArg} unit\n *   The unit of `number`. One of second, millisecond, microsecond, nanosecond.\n * @return {Expr}\n */\nfunction Epoch(number, unit) {\n  arity.exact(2, arguments, Epoch.name)\n  return new Expr({ epoch: wrap(number), unit: wrap(unit) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timeadd).\n *\n * Returns a new time or date with the offset in terms of the unit\n * added.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeAdd(base, offset, unit) {\n  arity.exact(3, arguments, TimeAdd.name)\n  return new Expr({\n    time_add: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timesubtract).\n *\n * Returns a new time or date with the offset in terms of the unit\n * subtracted.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeSubtract(base, offset, unit) {\n  arity.exact(3, arguments, TimeSubtract.name)\n  return new Expr({\n    time_subtract: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timediff).\n *\n * Returns the number of intervals in terms of the unit between\n * two times or dates. Both start and finish must be of the same\n * type.\n *\n * @param start the starting time or date, inclusive\n * @param finish the ending time or date, exclusive\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeDiff(start, finish, unit) {\n  arity.exact(3, arguments, TimeDiff.name)\n  return new Expr({\n    time_diff: wrap(start),\n    other: wrap(finish),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to convert to a Date object\n * @return {Expr}\n */\nfunction Date(string) {\n  arity.exact(1, arguments, Date.name)\n  return new Expr({ date: wrap(string) })\n}\n\n/**\n * Returns the current snapshot time.\n *\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/now\">Now function</a>\n */\nfunction Now() {\n  arity.exact(0, arguments, Now.name)\n  return new Expr({ now: wrap(null) })\n}\n\n// Miscellaneous functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @deprecated use NewId instead\n * @return {Expr}\n */\nfunction NextId() {\n  arity.exact(0, arguments, NextId.name)\n  return new Expr({ next_id: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @return {Expr}\n */\nfunction NewId() {\n  arity.exact(0, arguments, NewId.name)\n  return new Expr({ new_id: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the database.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database's scope.\n * @return {Expr}\n */\nfunction Database(name, scope) {\n  arity.between(1, 2, arguments, Database.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ database: wrap(name) })\n    case 2:\n      return new Expr({ database: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the index.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index's scope.\n * @return {Expr}\n */\nfunction Index(name, scope) {\n  arity.between(1, 2, arguments, Index.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ index: wrap(name) })\n    case 2:\n      return new Expr({ index: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the class.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class's scope.\n * @return {Expr}\n *\n * @deprecated Class is deprecated, use Collection instead\n */\nfunction Class(name, scope) {\n  arity.between(1, 2, arguments, Class.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ class: wrap(name) })\n    case 2:\n      return new Expr({ class: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the collection.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection's scope.\n * @return {Expr}\n */\nfunction Collection(name, scope) {\n  arity.between(1, 2, arguments, Collection.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ collection: wrap(name) })\n    case 2:\n      return new Expr({ collection: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the user defined function.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function's scope.\n * @return {Expr}\n */\nfunction FunctionFn(name, scope) {\n  arity.between(1, 2, arguments, FunctionFn.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ function: wrap(name) })\n    case 2:\n      return new Expr({ function: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the role.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role's scope.\n * @return {Expr}\n */\nfunction Role(name, scope) {\n  arity.between(1, 2, arguments, Role.name)\n  scope = util.defaults(scope, null)\n  return new Expr(params({ role: wrap(name) }, { scope: wrap(scope) }))\n}\n\n/**\n *\n * @param {module:query~ExprArg} scope\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction AccessProviders(scope) {\n  arity.max(1, arguments, AccessProviders.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ access_providers: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `classes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class set's scope.\n * @return {Expr}\n */\nfunction Classes(scope) {\n  arity.max(1, arguments, Classes.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ classes: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `collections` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection set's scope.\n * @return {Expr}\n */\nfunction Collections(scope) {\n  arity.max(1, arguments, Collections.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ collections: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `databases` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction Databases(scope) {\n  arity.max(1, arguments, Databases.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ databases: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs an `indexes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index set's scope.\n * @return {Expr}\n */\nfunction Indexes(scope) {\n  arity.max(1, arguments, Indexes.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ indexes: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `functions` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function set's scope.\n * @return {Expr}\n */\nfunction Functions(scope) {\n  arity.max(1, arguments, Functions.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ functions: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `roles` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role set's scope.\n * @return {Expr}\n */\nfunction Roles(scope) {\n  arity.max(1, arguments, Roles.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ roles: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `keys` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the key set's scope.\n * @return {Expr}\n */\nfunction Keys(scope) {\n  arity.max(1, arguments, Keys.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ keys: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `tokens` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the token set's scope.\n * @return {Expr}\n */\nfunction Tokens(scope) {\n  arity.max(1, arguments, Tokens.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ tokens: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `credentials` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the credential set's scope.\n * @return {Expr}\n */\nfunction Credentials(scope) {\n  arity.max(1, arguments, Credentials.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ credentials: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of expressions to check for equivalence.\n * @return {Expr}\n */\nfunction Equals() {\n  arity.min(1, arguments, Equals.name)\n  return new Expr({ equals: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n *\n * @deprecated use ContainsPath instead\n */\nfunction Contains(path, _in) {\n  arity.exact(2, arguments, Contains.name)\n  return new Expr({ contains: wrap(path), in: wrap(_in) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} value\n *   Represent the value we want to search for.\n * @param {module:query~ExprArg} in\n *   An object we will search for the value passed in.\n * @return {Expr}\n */\nfunction ContainsValue(value, _in) {\n  arity.exact(2, arguments, ContainsValue.name)\n  return new Expr({ contains_value: wrap(value), in: wrap(_in) })\n}\n\n/**\n * @param {string} field\n *   A field name we want to confirm exists.\n * @param {module:query~ExprArg} obj\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsField(field, obj) {\n  arity.exact(2, arguments, ContainsField.name)\n  return new Expr({ contains_field: wrap(field), in: wrap(obj) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsPath(path, _in) {\n  arity.exact(2, arguments, ContainsPath.name)\n  return new Expr({ contains_path: wrap(path), in: wrap(_in) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @param {?module:query~ExprArg} default\n *   A default value if the path does not exist.\n * @return {Expr}\n */\nfunction Select(path, from, _default) {\n  arity.between(2, 3, arguments, Select.name)\n  var exprObj = { select: wrap(path), from: wrap(from) }\n  if (_default !== undefined) {\n    exprObj.default = wrap(_default)\n  }\n  return new Expr(exprObj)\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @return {Expr}\n *\n * @deprecated avoid using\n */\nfunction SelectAll(path, from) {\n  arity.exact(2, arguments, SelectAll.name)\n  return new Expr({ select_all: wrap(path), from: wrap(from) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the absolute value.\n * @return {Expr}\n */\nfunction Abs(expr) {\n  arity.exact(1, arguments, Abs.name)\n  return new Expr({ abs: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to sum together.\n * @return {Expr}\n */\nfunction Add() {\n  arity.min(1, arguments, Add.name)\n  return new Expr({ add: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise and together.\n * @return {Expr}\n */\nfunction BitAnd() {\n  arity.min(1, arguments, BitAnd.name)\n  return new Expr({ bitand: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the bitwise not.\n * @return {Expr}\n */\nfunction BitNot(expr) {\n  arity.exact(1, arguments, BitNot.name)\n  return new Expr({ bitnot: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Or'd together.\n * @return {Expr}\n */\nfunction BitOr() {\n  arity.min(1, arguments, BitOr.name)\n  return new Expr({ bitor: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Xor'd together.\n * @return {Expr}\n */\nfunction BitXor() {\n  arity.min(1, arguments, BitXor.name)\n  return new Expr({ bitxor: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The least integer that is greater than or equal to the number\n * @return {Expr}\n */\nfunction Ceil(expr) {\n  arity.exact(1, arguments, Ceil.name)\n  return new Expr({ ceil: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of.\n * @return {Expr}\n */\nfunction Divide() {\n  arity.min(1, arguments, Divide.name)\n  return new Expr({ divide: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The greatest integer that is less than or equal to the number\n * @return {Expr}\n */\nfunction Floor(expr) {\n  arity.exact(1, arguments, Floor.name)\n  return new Expr({ floor: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Max() {\n  arity.min(1, arguments, Max.name)\n  return new Expr({ max: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Min() {\n  arity.min(1, arguments, Min.name)\n  return new Expr({ min: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of. The remainder will be returned.\n * @return {Expr}\n */\nfunction Modulo() {\n  arity.min(1, arguments, Modulo.name)\n  return new Expr({ modulo: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Multiply() {\n  arity.min(1, arguments, Multiply.name)\n  return new Expr({ multiply: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to round.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Round(value, precision) {\n  arity.min(1, arguments, Round.name)\n  precision = util.defaults(precision, null)\n  return new Expr(\n    params({ round: wrap(value) }, { precision: wrap(precision) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the difference of.\n * @return {Expr}\n */\nfunction Subtract() {\n  arity.min(1, arguments, Subtract.name)\n  return new Expr({ subtract: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sign of the number is returned as positive 1, zero 0 , negative -1\n * @return {Expr}\n */\nfunction Sign(expr) {\n  arity.exact(1, arguments, Sign.name)\n  return new Expr({ sign: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The square root of the number\n * @return {Expr}\n */\nfunction Sqrt(expr) {\n  arity.exact(1, arguments, Sqrt.name)\n  return new Expr({ sqrt: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to truncate.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Trunc(value, precision) {\n  arity.min(1, arguments, Trunc.name)\n  precision = util.defaults(precision, null)\n  return new Expr(\n    params({ trunc: wrap(value) }, { precision: wrap(precision) })\n  )\n}\n\n/**\n *\n * Count the number of elements in the collection.\n *\n * @param {array}    - array of items\n * @return {integer} - number of items in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/count\">Count function</a>\n */\nfunction Count(collection) {\n  arity.exact(1, arguments, Count.name)\n  return new Expr({ count: wrap(collection) })\n}\n\n/**\n *\n * Sum the elements in the collection.\n *\n * @param {array} - collection of numbers\n * @return {integer} - total of all numbers in collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/sum\">Sum function</a>\n */\nfunction Sum(collection) {\n  arity.exact(1, arguments, Sum.name)\n  return new Expr({ sum: wrap(collection) })\n}\n\n/**\n *\n * Returns the mean of all elements in the collection.\n *\n * @param {array} - collection the numbers\n * @return {float} - the mean of all numbers in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/mean\">Mean function</a>\n */\nfunction Mean(collection) {\n  arity.exact(1, arguments, Mean.name)\n  return new Expr({ mean: wrap(collection) })\n}\n\n/**\n *\n * Evaluates to true if any element of the collection is true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/any\">Any function</a>\n */\nfunction Any(collection) {\n  arity.exact(1, arguments, Any.name)\n  return new Expr({ any: wrap(collection) })\n}\n\n/**\n *\n * Evaluates to true if all elements of the collection are true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/all\">All function</a>\n */\nfunction All(collection) {\n  arity.exact(1, arguments, All.name)\n  return new Expr({ all: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc cosine of the number\n * @return {Expr}\n */\nfunction Acos(expr) {\n  arity.exact(1, arguments, Acos.name)\n  return new Expr({ acos: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc sine of the number\n * @return {Expr}\n */\nfunction Asin(expr) {\n  arity.exact(1, arguments, Asin.name)\n  return new Expr({ asin: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc tangent of the number\n * @return {Expr}\n */\nfunction Atan(expr) {\n  arity.exact(1, arguments, Atan.name)\n  return new Expr({ atan: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The cosine of a number\n * @return {Expr}\n */\nfunction Cos(expr) {\n  arity.exact(1, arguments, Cos.name)\n  return new Expr({ cos: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic cosine of the number\n * @return {Expr}\n */\nfunction Cosh(expr) {\n  arity.exact(1, arguments, Cosh.name)\n  return new Expr({ cosh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take radians and convert it to degrees 360 degrees = 2 * pi radians\n * @return {Expr}\n */\nfunction Degrees(expr) {\n  arity.exact(1, arguments, Degrees.name)\n  return new Expr({ degrees: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The e raised to an exponent number\n * @return {Expr}\n */\nfunction Exp(expr) {\n  arity.exact(1, arguments, Exp.name)\n  return new Expr({ exp: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A side of the right triangle\n * @param {...module:query~ExprArg} terms\n *   The second side of a right triange, defaults to the first side\n * @return {Expr}\n */\nfunction Hypot(value, side) {\n  arity.min(1, arguments, Hypot.name)\n  side = util.defaults(side, null)\n  return new Expr(params({ hypot: wrap(value) }, { b: wrap(side) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The natural log of the number\n * @return {Expr}\n */\nfunction Ln(expr) {\n  arity.exact(1, arguments, Ln.name)\n  return new Expr({ ln: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The log base 10 of a number\n * @return {Expr}\n */\nfunction Log(expr) {\n  arity.exact(1, arguments, Log.name)\n  return new Expr({ log: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to raise to the power.\n * @param {...module:query~ExprArg} terms\n *   An optional exponent\n * @return {Expr}\n */\nfunction Pow(value, exponent) {\n  arity.min(1, arguments, Pow.name)\n  exponent = util.defaults(exponent, null)\n  return new Expr(params({ pow: wrap(value) }, { exp: wrap(exponent) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take degrees and convert the number to radians 2 * pi = 360 degrees\n * @return {Expr}\n */\nfunction Radians(expr) {\n  arity.exact(1, arguments, Radians.name)\n  return new Expr({ radians: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sine of a number\n * @return {Expr}\n */\nfunction Sin(expr) {\n  arity.exact(1, arguments, Sin.name)\n  return new Expr({ sin: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic sine of a number\n * @return {Expr}\n */\nfunction Sinh(expr) {\n  arity.exact(1, arguments, Sinh.name)\n  return new Expr({ sinh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The Tangent of a number\n * @return {Expr}\n */\nfunction Tan(expr) {\n  arity.exact(1, arguments, Tan.name)\n  return new Expr({ tan: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyberbolic tangent of a number\n * @return {Expr}\n */\nfunction Tanh(expr) {\n  arity.exact(1, arguments, Tanh.name)\n  return new Expr({ tanh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LT() {\n  arity.min(1, arguments, LT.name)\n  return new Expr({ lt: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LTE() {\n  arity.min(1, arguments, LTE.name)\n  return new Expr({ lte: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GT() {\n  arity.min(1, arguments, GT.name)\n  return new Expr({ gt: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GTE() {\n  arity.min(1, arguments, GTE.name)\n  return new Expr({ gte: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the conjunction of.\n * @return {Expr}\n */\nfunction And() {\n  arity.min(1, arguments, And.name)\n  return new Expr({ and: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the disjunction of.\n * @return {Expr}\n */\nfunction Or() {\n  arity.min(1, arguments, Or.name)\n  return new Expr({ or: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {module:query~ExprArg} boolean\n *   A boolean to produce the negation of.\n * @return {Expr}\n */\nfunction Not(boolean) {\n  arity.exact(1, arguments, Not.name)\n  return new Expr({ not: wrap(boolean) })\n}\n\n/**\n * Converts an expression to a string literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a string.\n * @return {Expr}\n */\nfunction ToString(expr) {\n  arity.exact(1, arguments, ToString.name)\n  return new Expr({ to_string: wrap(expr) })\n}\n\n/**\n * Converts an expression to a number literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a number.\n * @return {Expr}\n */\nfunction ToNumber(expr) {\n  arity.exact(1, arguments, ToNumber.name)\n  return new Expr({ to_number: wrap(expr) })\n}\n\n/**\n * Converts an expression to an Object.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Object.\n * @return {Expr}\n */\nfunction ToObject(expr) {\n  arity.exact(1, arguments, ToObject.name)\n  return new Expr({ to_object: wrap(expr) })\n}\n\n/**\n * Converts an expression to an Array.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Array.\n * @return {Expr}\n */\nfunction ToArray(expr) {\n  arity.exact(1, arguments, ToArray.name)\n  return new Expr({ to_array: wrap(expr) })\n}\n\n/**\n * Converts an expression to a double value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a double.\n * @return {Expr}\n */\nfunction ToDouble(expr) {\n  arity.exact(1, arguments, ToDouble.name)\n  return new Expr({ to_double: wrap(expr) })\n}\n\n/**\n * Converts an expression to an integer value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an integer.\n * @return {Expr}\n */\nfunction ToInteger(expr) {\n  arity.exact(1, arguments, ToInteger.name)\n  return new Expr({ to_integer: wrap(expr) })\n}\n\n/**\n * Converts an expression to a time literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a time.\n * @return {Expr}\n */\nfunction ToTime(expr) {\n  arity.exact(1, arguments, ToTime.name)\n  return new Expr({ to_time: wrap(expr) })\n}\n\n/**\n * Converts an expression evaluating to a time to seconds since epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to seconds numeric value.\n * @return {Expr}\n */\nfunction ToSeconds(expr) {\n  arity.exact(1, arguments, ToSeconds.name)\n  return new Expr({ to_seconds: wrap(expr) })\n}\n\n/**\n * Converts a time expression to milliseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to millisecond numeric value.\n * @return {Expr}\n */\nfunction ToMillis(expr) {\n  arity.exact(1, arguments, ToMillis.name)\n  return new Expr({ to_millis: wrap(expr) })\n}\n\n/**\n * Converts a time expression to microseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to microsecond numeric value.\n * @return {Expr}\n */\nfunction ToMicros(expr) {\n  arity.exact(1, arguments, ToMicros.name)\n  return new Expr({ to_micros: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the week following ISO-8601 convention, from 1 (Monday) to 7 (Sunday).\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of week.\n * @return {Expr}\n */\nfunction DayOfWeek(expr) {\n  arity.exact(1, arguments, DayOfWeek.name)\n  return new Expr({ day_of_week: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the year, from 1 to 365, or 366 in a leap year.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of year.\n * @return {Expr}\n */\nfunction DayOfYear(expr) {\n  arity.exact(1, arguments, DayOfYear.name)\n  return new Expr({ day_of_year: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the month, from 1 to 31.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of month.\n * @return {Expr}\n */\nfunction DayOfMonth(expr) {\n  arity.exact(1, arguments, DayOfMonth.name)\n  return new Expr({ day_of_month: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a hour.\n * @return {Expr}\n */\nfunction Hour(expr) {\n  arity.exact(1, arguments, Hour.name)\n  return new Expr({ hour: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Minute(expr) {\n  arity.exact(1, arguments, Minute.name)\n  return new Expr({ minute: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Second(expr) {\n  arity.exact(1, arguments, Second.name)\n  return new Expr({ second: wrap(expr) })\n}\n\n/**\n * Returns a time expression's month of the year, from 1 to 12.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Month(expr) {\n  arity.exact(1, arguments, Month.name)\n  return new Expr({ month: wrap(expr) })\n}\n\n/**\n * Returns the time expression's year, following the ISO-8601 standard.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a year.\n * @return {Expr}\n */\nfunction Year(expr) {\n  arity.exact(1, arguments, Year.name)\n  return new Expr({ year: wrap(expr) })\n}\n\n/**\n * Converts an expression to a date literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a date.\n * @return {Expr}\n */\nfunction ToDate(expr) {\n  arity.exact(1, arguments, ToDate.name)\n  return new Expr({ to_date: wrap(expr) })\n}\n\n/**\n * Move database to a new hierarchy.\n *\n * @param {string}  from database reference to be moved.\n * @param {string}  to new parent database reference.\n * @return {Expr}   The expression wrapping the provided object.\n * @see <a href=\"https://app.fauna.com/documentation/reference/queryapi#write-functions\">FaunaDB Write Functions</a>\n */\nfunction MoveDatabase(from, to) {\n  arity.exact(2, arguments, MoveDatabase.name)\n  return new Expr({ move_database: wrap(from), to: wrap(to) })\n}\n\n/**\n * Returns a set of all documents in the given collection.\n * A set must be paginated in order to retrieve its values.\n *\n * @param collection a reference to the collection. Type: Ref\n * @return a new {@link Expr} instance\n * @see #Paginate(Expr)\n */\nfunction Documents(collection) {\n  arity.exact(1, arguments, Documents.name)\n  return new Expr({ documents: wrap(collection) })\n}\n\n/**\n *\n * @param {module:query~ExprArg} expr\n *  An expression (i.e. Set, Page, or Array) to reverse\n * @return {Expr}\n */\nfunction Reverse(expr) {\n  arity.exact(1, arguments, Reverse.name)\n  return new Expr({ reverse: wrap(expr) })\n}\n\n/**\n *\n * @param {module:query~ExprArg} name\n * A string representing an AccessProvider's name\n * @return {Expr}\n */\nfunction AccessProvider(name) {\n  arity.exact(1, arguments, AccessProvider.name)\n  return new Expr({ access_provider: wrap(name) })\n}\n\n// Helpers\n\n/**\n * @ignore\n */\nfunction arity(min, max, args, callerFunc) {\n  if (\n    (min !== null && args.length < min) ||\n    (max !== null && args.length > max)\n  ) {\n    throw new errors.InvalidArity(min, max, args.length, callerFunc)\n  }\n}\n\narity.exact = function(n, args, callerFunc) {\n  arity(n, n, args, callerFunc)\n}\narity.max = function(n, args, callerFunc) {\n  arity(null, n, args, callerFunc)\n}\narity.min = function(n, args, callerFunc) {\n  arity(n, null, args, callerFunc)\n}\narity.between = function(min, max, args, callerFunc) {\n  arity(min, max, args, callerFunc)\n}\n\n/** Adds optional parameters to the query.\n *\n * @ignore\n * */\nfunction params(mainParams, optionalParams) {\n  for (var key in optionalParams) {\n    var val = optionalParams[key]\n    if (val !== null && val !== undefined) {\n      mainParams[key] = val\n    }\n  }\n  return mainParams\n}\n\n/**\n * Called on rest arguments.\n * This ensures that a single value passed is not put in an array, so\n * `query.add([1, 2])` will work as well as `query.add(1, 2)`.\n *\n * @ignore\n */\nfunction varargs(values) {\n  var valuesAsArr = Array.isArray(values)\n    ? values\n    : Array.prototype.slice.call(values)\n  return values.length === 1 ? values[0] : valuesAsArr\n}\n\n/**\n * @ignore\n */\nfunction argsToArray(args) {\n  var rv = []\n  rv.push.apply(rv, args)\n  return rv\n}\n\n/**\n * Wraps an object as an Expression. This will automatically wrap any bare objects with\n * the appropriate {@link object} escaping.\n * @param {Object} obj\n *  The object to be wrapped as an Expression.\n * @returns {Expr}\n *   The expression wrapping the provided object.\n * @private\n */\nfunction wrap(obj) {\n  arity.exact(1, arguments, wrap.name)\n  if (obj === null) {\n    return null\n  } else if (\n    obj instanceof Expr ||\n    util.checkInstanceHasProperty(obj, '_isFaunaExpr')\n  ) {\n    return obj\n  } else if (typeof obj === 'symbol') {\n    return obj.toString().replace(/Symbol\\((.*)\\)/, function(str, symbol) {\n      return symbol\n    })\n  } else if (typeof obj === 'function') {\n    return Lambda(obj)\n  } else if (Array.isArray(obj)) {\n    return new Expr(\n      obj.map(function(elem) {\n        return wrap(elem)\n      })\n    )\n  } else if (obj instanceof Uint8Array || obj instanceof ArrayBuffer) {\n    return new values.Bytes(obj)\n  } else if (typeof obj === 'object') {\n    return new Expr({ object: wrapValues(obj) })\n  } else {\n    return obj\n  }\n}\n\n/**\n * Wraps all of the values of a provided Object, while leaving the parent object unwrapped.\n * @param {Object} obj\n *  The object whose values are to be wrapped as Expressions.\n * @returns {Object}\n *  A copy of the provided object, with the values wrapped as Expressions.\n * @private\n */\nfunction wrapValues(obj) {\n  if (obj !== null) {\n    var rv = {}\n\n    Object.keys(obj).forEach(function(key) {\n      rv[key] = wrap(obj[key])\n    })\n\n    return rv\n  } else {\n    return null\n  }\n}\n\nmodule.exports = {\n  Ref: Ref,\n  Bytes: Bytes,\n  Abort: Abort,\n  At: At,\n  Let: Let,\n  Var: Var,\n  If: If,\n  Do: Do,\n  Object: objectFunction,\n  Lambda: Lambda,\n  Call: Call,\n  Query: Query,\n  Map: Map,\n  Foreach: Foreach,\n  Filter: Filter,\n  Take: Take,\n  Drop: Drop,\n  Prepend: Prepend,\n  Append: Append,\n  IsEmpty: IsEmpty,\n  IsNonEmpty: IsNonEmpty,\n  IsNumber: IsNumber,\n  IsDouble: IsDouble,\n  IsInteger: IsInteger,\n  IsBoolean: IsBoolean,\n  IsNull: IsNull,\n  IsBytes: IsBytes,\n  IsTimestamp: IsTimestamp,\n  IsDate: IsDate,\n  IsString: IsString,\n  IsArray: IsArray,\n  IsObject: IsObject,\n  IsRef: IsRef,\n  IsSet: IsSet,\n  IsDoc: IsDoc,\n  IsLambda: IsLambda,\n  IsCollection: IsCollection,\n  IsDatabase: IsDatabase,\n  IsIndex: IsIndex,\n  IsFunction: IsFunction,\n  IsKey: IsKey,\n  IsToken: IsToken,\n  IsCredentials: IsCredentials,\n  IsRole: IsRole,\n  Get: Get,\n  KeyFromSecret: KeyFromSecret,\n  Reduce: Reduce,\n  Paginate: Paginate,\n  Exists: Exists,\n  Create: Create,\n  Update: Update,\n  Replace: Replace,\n  Delete: Delete,\n  Insert: Insert,\n  Remove: Remove,\n  CreateClass: deprecate(\n    CreateClass,\n    'CreateClass() is deprecated, use CreateCollection() instead'\n  ),\n  CreateCollection: CreateCollection,\n  CreateDatabase: CreateDatabase,\n  CreateIndex: CreateIndex,\n  CreateKey: CreateKey,\n  CreateFunction: CreateFunction,\n  CreateRole: CreateRole,\n  CreateAccessProvider: CreateAccessProvider,\n  Singleton: Singleton,\n  Events: Events,\n  Match: Match,\n  Union: Union,\n  Merge: Merge,\n  Intersection: Intersection,\n  Difference: Difference,\n  Distinct: Distinct,\n  Join: Join,\n  Range: Range,\n  Login: Login,\n  Logout: Logout,\n  Identify: Identify,\n  Identity: deprecate(\n    Identity,\n    'Identity() is deprecated, use CurrentIdentity() instead'\n  ),\n  CurrentIdentity: CurrentIdentity,\n  HasIdentity: deprecate(\n    HasIdentity,\n    'HasIdentity() is deprecated, use HasCurrentIdentity() instead'\n  ),\n  HasCurrentIdentity: HasCurrentIdentity,\n  CurrentToken: CurrentToken,\n  HasCurrentToken: HasCurrentToken,\n  Concat: Concat,\n  Casefold: Casefold,\n  ContainsStr: ContainsStr,\n  ContainsStrRegex: ContainsStrRegex,\n  StartsWith: StartsWith,\n  EndsWith: EndsWith,\n  FindStr: FindStr,\n  FindStrRegex: FindStrRegex,\n  Length: Length,\n  LowerCase: LowerCase,\n  LTrim: LTrim,\n  NGram: NGram,\n  Repeat: Repeat,\n  ReplaceStr: ReplaceStr,\n  ReplaceStrRegex: ReplaceStrRegex,\n  RegexEscape: RegexEscape,\n  RTrim: RTrim,\n  Space: Space,\n  SubString: SubString,\n  TitleCase: TitleCase,\n  Trim: Trim,\n  UpperCase: UpperCase,\n  Format: Format,\n  Time: Time,\n  TimeAdd: TimeAdd,\n  TimeSubtract: TimeSubtract,\n  TimeDiff: TimeDiff,\n  Epoch: Epoch,\n  Date: Date,\n  Now: Now,\n  NextId: deprecate(NextId, 'NextId() is deprecated, use NewId() instead'),\n  NewId: NewId,\n  Database: Database,\n  Index: Index,\n  Class: deprecate(Class, 'Class() is deprecated, use Collection() instead'),\n  Collection: Collection,\n  Function: FunctionFn,\n  Role: Role,\n  AccessProviders: AccessProviders,\n  Classes: deprecate(\n    Classes,\n    'Classes() is deprecated, use Collections() instead'\n  ),\n  Collections: Collections,\n  Databases: Databases,\n  Indexes: Indexes,\n  Functions: Functions,\n  Roles: Roles,\n  Keys: Keys,\n  Tokens: Tokens,\n  Credentials: Credentials,\n  Equals: Equals,\n  Contains: deprecate(\n    Contains,\n    'Contains() is deprecated, use ContainsPath() instead'\n  ),\n  ContainsPath: ContainsPath,\n  ContainsField: ContainsField,\n  ContainsValue: ContainsValue,\n  Select: Select,\n  SelectAll: deprecate(SelectAll, 'SelectAll() is deprecated. Avoid use.'),\n  Abs: Abs,\n  Add: Add,\n  BitAnd: BitAnd,\n  BitNot: BitNot,\n  BitOr: BitOr,\n  BitXor: BitXor,\n  Ceil: Ceil,\n  Divide: Divide,\n  Floor: Floor,\n  Max: Max,\n  Min: Min,\n  Modulo: Modulo,\n  Multiply: Multiply,\n  Round: Round,\n  Subtract: Subtract,\n  Sign: Sign,\n  Sqrt: Sqrt,\n  Trunc: Trunc,\n  Count: Count,\n  Sum: Sum,\n  Mean: Mean,\n  Any: Any,\n  All: All,\n  Acos: Acos,\n  Asin: Asin,\n  Atan: Atan,\n  Cos: Cos,\n  Cosh: Cosh,\n  Degrees: Degrees,\n  Exp: Exp,\n  Hypot: Hypot,\n  Ln: Ln,\n  Log: Log,\n  Pow: Pow,\n  Radians: Radians,\n  Sin: Sin,\n  Sinh: Sinh,\n  Tan: Tan,\n  Tanh: Tanh,\n  LT: LT,\n  LTE: LTE,\n  GT: GT,\n  GTE: GTE,\n  And: And,\n  Or: Or,\n  Not: Not,\n  ToString: ToString,\n  ToNumber: ToNumber,\n  ToObject: ToObject,\n  ToArray: ToArray,\n  ToDouble: ToDouble,\n  ToInteger: ToInteger,\n  ToTime: ToTime,\n  ToSeconds: ToSeconds,\n  ToMicros: ToMicros,\n  ToMillis: ToMillis,\n  DayOfMonth: DayOfMonth,\n  DayOfWeek: DayOfWeek,\n  DayOfYear: DayOfYear,\n  Second: Second,\n  Minute: Minute,\n  Hour: Hour,\n  Month: Month,\n  Year: Year,\n  ToDate: ToDate,\n  MoveDatabase: MoveDatabase,\n  Documents: Documents,\n  Reverse: Reverse,\n  AccessProvider: AccessProvider,\n  wrap: wrap,\n}\n", "'use strict'\n\nvar values = require('./values')\n\nfunction toJSON(object, pretty) {\n  pretty = typeof pretty !== 'undefined' ? pretty : false\n\n  if (pretty) {\n    return JSON.stringify(object, null, '  ')\n  } else {\n    return JSON.stringify(object)\n  }\n}\n\nfunction parseJSON(json) {\n  return JSON.parse(json, json_parse)\n}\n\n/*\n * Parses a line-separated JSON stream. For backwards compatibility with\n * concatenated JSON objects, it attempts to parse the received content as a\n * JSON object. Failures should occur when partial or multiple line-separated\n * JSON objects are received. Upon a parsing failure, attempt paring the\n * received content as line-separated JSON objects.\n *\n * See https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON\n * See https://en.wikipedia.org/wiki/JSON_streaming#Concatenated_JSON\n *\n * @private\n */\nfunction parseJSONStreaming(content) {\n  var values = []\n\n  try {\n    values.push(parseJSON(content))\n    content = '' // whole content parsed\n  } catch (err) {\n    while (true) {\n      var pos = content.indexOf('\\n') + 1 // include \\n\n      if (pos <= 0) {\n        break\n      }\n      var slice = content.slice(0, pos).trim()\n      if (slice.length > 0) {\n        // discards empty slices due to leading \\n\n        values.push(parseJSON(slice))\n      }\n      content = content.slice(pos)\n    }\n  }\n\n  return {\n    values: values,\n    buffer: content,\n  }\n}\n\nfunction json_parse(_, val) {\n  if (typeof val !== 'object' || val === null) {\n    return val\n  } else if ('@ref' in val) {\n    var ref = val['@ref']\n\n    if (!('collection' in ref) && !('database' in ref)) {\n      return values.Native.fromName(ref['id'])\n    }\n\n    var col = json_parse('collection', ref['collection'])\n    var db = json_parse('database', ref['database'])\n\n    return new values.Ref(ref['id'], col, db)\n  } else if ('@obj' in val) {\n    return val['@obj']\n  } else if ('@set' in val) {\n    return new values.SetRef(val['@set'])\n  } else if ('@ts' in val) {\n    return new values.FaunaTime(val['@ts'])\n  } else if ('@date' in val) {\n    return new values.FaunaDate(val['@date'])\n  } else if ('@bytes' in val) {\n    return new values.Bytes(val['@bytes'])\n  } else if ('@query' in val) {\n    return new values.Query(val['@query'])\n  } else {\n    return val\n  }\n}\n\nmodule.exports = {\n  toJSON: toJSON,\n  parseJSON: parseJSON,\n  parseJSONStreaming: parseJSONStreaming,\n}\n", "'use strict'\n\nvar query = require('./query')\nvar objectAssign = require('object-assign')\n\n/**\n * A FaunaDB Lambda expression to be passed into one of the collection\n * functions: Map or Filter.\n *\n * @callback PageHelper~collectionFunction\n * @param {any} var\n *   The variable passed in by FaunaDB when this Lambda\n *   function is executed.\n * @return {Expr}\n *   The FaunaDB query expression to be returned by this Lambda.\n */\n\n/**\n * @callback PageHelper~eachFunction\n * @param {Object} page\n *   A page returned by FaunaDB's Paginate function.\n */\n\n/**\n * A wrapper that provides a helpful API for consuming FaunaDB pages.\n *\n * Generally this is constructed through the {@link Client#paginate} method.\n *\n * The {@link PageHelper#map} and {@link PageHelper#filter} methods will wrap the underlying query with a Map\n * and Filter query function, respectively. These will be executed on the server when a promise-returning function\n * is called.\n *\n * The {@link PageHelper#each} and {@link PageHelper#eachReverse} functions dispatch queries to FaunaDB, and return Promises\n * representing the completion of those queries. The callbacks provided to these functions are executed locally when the\n * queries return.\n *\n * The {@link PageHelper#nextPage} and {@link PageHelper#previousPage} functions also dispatch queries to FaunaDB,\n * but return their responses in a wrapped Promise.\n *\n * @param {Client} client\n *   The FaunaDB client used to paginate.\n * @param {Object} set\n *   The set to paginate.\n * @param {?Object} params\n *   Parameters to be passed to the FaunaDB Paginate function.\n * @param {?Object} options\n *   Object that configures the current pagination, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @constructor\n */\nfunction PageHelper(client, set, params, options) {\n  if (params === undefined) {\n    params = {}\n  }\n\n  if (options === undefined) {\n    options = {}\n  }\n\n  this.reverse = false\n  this.params = {}\n\n  this.before = undefined\n  this.after = undefined\n\n  objectAssign(this.params, params)\n\n  var cursorParams = this.params.cursor || this.params\n\n  if ('before' in cursorParams) {\n    this.before = cursorParams.before\n    delete cursorParams.before\n  } else if ('after' in cursorParams) {\n    this.after = cursorParams.after\n    delete cursorParams.after\n  }\n\n  this.options = {}\n  objectAssign(this.options, options)\n\n  this.client = client\n  this.set = set\n\n  /**\n   * @member {Array.<Function>}\n   * @type {Array.<Function>}\n   * @private\n   */\n  this._faunaFunctions = []\n}\n\n/**\n * Wraps the set to be paginated with a FaunaDB Map function.\n * As this function is executed on the server, the `lambda` param must\n * return a valid query expression.\n *\n * @param {PageHelper~collectionFunction} lambda\n *   The Lambda expression to be passed into the Map function.\n * @return {PageHelper}\n *\n */\nPageHelper.prototype.map = function(lambda) {\n  var rv = this._clone()\n  rv._faunaFunctions.push(function(q) {\n    return query.Map(q, lambda)\n  })\n  return rv\n}\n\n/**\n * Wraps the set to be paginated with a FaunaDB Filter funciton.\n * As this function is executed on the server, the `lambda` param must\n * return a valid query expression.\n *\n * @param {PageHelper~collectionFunction} lambda\n *   The lambda expression to be passed into the Filter function.\n * @return {PageHelper}\n */\nPageHelper.prototype.filter = function(lambda) {\n  var rv = this._clone()\n  rv._faunaFunctions.push(function(q) {\n    return query.Filter(q, lambda)\n  })\n  return rv\n}\n\n/**\n * Executes the provided function for each page.\n *\n * @param {PageHelper~eachFunction} lambda\n *   A function to be executed for each page.\n * @returns {external:Promise.<void>}\n */\nPageHelper.prototype.each = function(lambda) {\n  return this._retrieveNextPage(this.after, false).then(\n    this._consumePages(lambda, false)\n  )\n}\n\n/**\n * Executes the provided function for each page, in the reverse direction.\n * @param {PageHelper~eachFunction} lambda\n * @returns {external:Promise.<void>}\n */\nPageHelper.prototype.eachReverse = function(lambda) {\n  return this._retrieveNextPage(this.before, true).then(\n    this._consumePages(lambda, true)\n  )\n}\n\n/**\n * Queries for the previous page from the current cursor point; this mutates\n * the state of the PageHelper when the query completes, updating the internal\n * cursor state to that of the returned page.\n *\n * @returns {external:Promise.<object>}\n */\nPageHelper.prototype.previousPage = function() {\n  var self = this\n  return this._retrieveNextPage(this.before, true).then(\n    this._adjustCursors.bind(self)\n  )\n}\n\n/**\n * Queries for the next page from the current cursor point; this mutates\n * the state of the PageHelper when the query completes, updating the internal\n * cursor state to that of the returned page.\n *\n * @returns {external:Promise.<object>}\n */\nPageHelper.prototype.nextPage = function() {\n  var self = this\n  return this._retrieveNextPage(this.after, false).then(\n    this._adjustCursors.bind(self)\n  )\n}\n\nPageHelper.prototype._adjustCursors = function(page) {\n  if (page.after !== undefined) {\n    this.after = page.after\n  }\n\n  if (page.before !== undefined) {\n    this.before = page.before\n  }\n\n  return page.data\n}\n\nPageHelper.prototype._consumePages = function(lambda, reverse) {\n  var self = this\n  return function(page) {\n    var data = []\n    page.data.forEach(function(item) {\n      if (item.document) {\n        item.instance = item.document\n      }\n      if (item.value && item.value.document) {\n        item.value.instance = item.value.document\n      }\n      data.push(item)\n    })\n    lambda(data)\n\n    var nextCursor\n    if (reverse) {\n      nextCursor = page.before\n    } else {\n      nextCursor = page.after\n    }\n\n    if (nextCursor !== undefined) {\n      return self\n        ._retrieveNextPage(nextCursor, reverse)\n        .then(self._consumePages(lambda, reverse))\n    } else {\n      return Promise.resolve()\n    }\n  }\n}\n\n/**\n *\n * @returns {external:Promise.<Object>}\n * @private\n */\nPageHelper.prototype._retrieveNextPage = function(cursor, reverse) {\n  var opts = {}\n  objectAssign(opts, this.params)\n  var cursorOpts = opts.cursor || opts\n\n  if (cursor !== undefined) {\n    if (reverse) {\n      cursorOpts.before = cursor\n    } else {\n      cursorOpts.after = cursor\n    }\n  } else {\n    if (reverse) {\n      cursorOpts.before = null\n    }\n  }\n\n  var q = query.Paginate(this.set, opts)\n\n  if (this._faunaFunctions.length > 0) {\n    this._faunaFunctions.forEach(function(lambda) {\n      q = lambda(q)\n    })\n  }\n\n  return this.client.query(q, this.options)\n}\n\n/**\n * @private\n * @returns {PageHelper}\n */\nPageHelper.prototype._clone = function() {\n  return Object.create(PageHelper.prototype, {\n    client: { value: this.client },\n    set: { value: this.set },\n    _faunaFunctions: { value: this._faunaFunctions },\n    before: { value: this.before },\n    after: { value: this.after },\n    params: { value: this.params },\n  })\n}\n\nmodule.exports = PageHelper\n", "'use strict'\n\n/**\n * A structure containing the request and response context for a given FaunaDB request.\n * Provided to an observer function optionally defined in the {@link Client} constructor.\n *\n * @param {'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'} method\n *   The HTTP method used in the request.\n * @param {string} path\n *   The path that was queried. Relative to the client's domain.\n * @param {string} query\n *   URL query parameters. Only set if `method` is \"GET\".\n * @param {Object} requestRaw\n *   The JSON request string.\n * @param {Object} requestContent\n *   The request data.\n * @param {string} responseRaw\n *   The unparsed response data, as a string.\n * @param {object | FaunaHttpErrorResponseContent} responseContent\n *   The response data parsed as JSON.\n * @param {number} statusCode\n *   The HTTP response status code.\n * @param {object} responseHeaders\n *   The HTTP headers returned in the response.\n * @param {number} startTime\n *   The time the request was issued by the client.\n * @param {number} endTime\n *   The time the response was received by the client.\n * @constructor\n */\nfunction RequestResult(\n  method,\n  path,\n  query,\n  requestRaw,\n  requestContent,\n  responseRaw,\n  responseContent,\n  statusCode,\n  responseHeaders,\n  startTime,\n  endTime\n) {\n  /** @type {'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'} */\n  this.method = method\n\n  /** @type {string} */\n  this.path = path\n\n  /**\n   * URL query. Null unless `method == 'get'`.\n   * *Not* related to {@link Client.query}.\n   * @type {object}\n   */\n  this.query = query\n\n  /** @type {string} */\n  this.requestRaw = requestRaw\n\n  /** @type {object} */\n  this.requestContent = requestContent\n\n  /** @type {string} */\n  this.responseRaw = responseRaw\n\n  /**\n   * Parsed value returned by the server.\n   * Includes \"resource\" wrapper dict, or may be an FaunaHttpErrorResponseContent instead\n   * @type {object | FaunaHttpErrorResponseContent}\n   */\n  this.responseContent = responseContent\n\n  /** @type {number} */\n  this.statusCode = statusCode\n\n  /** @type {object} */\n  this.responseHeaders = responseHeaders\n\n  /** @type {number} */\n  this.startTime = startTime\n\n  /** @type {number} */\n  this.endTime = endTime\n}\n\n/**\n * `this.endTime - this.startTime`: Time taken in milliseconds.\n * @type {number}\n */\nObject.defineProperty(RequestResult.prototype, 'timeTaken', {\n  get: function() {\n    return this.endTime - this.startTime\n  },\n})\n\nmodule.exports = RequestResult\n", "'use strict'\nvar util = require('../_util')\n\n/**\n * Thrown by HttpClient when request hits specified timeout.\n *\n * @param {?string} message\n * @extends Error\n * @constructor\n */\nfunction TimeoutError(message) {\n  Error.call(this)\n\n  this.message = message || 'Request aborted due to timeout'\n  this.isTimeoutError = true\n}\n\nutil.inherits(TimeoutError, Error)\n\n/**\n * Thrown by HttpClient when request is aborted via Signal interface.\n *\n * @param {?string} message\n * @extends Error\n * @constructor\n */\nfunction AbortError(message) {\n  Error.call(this)\n\n  this.message = message || 'Request aborted'\n  this.isAbortError = true\n}\n\nutil.inherits(AbortError, Error)\n\nmodule.exports = {\n  TimeoutError: TimeoutError,\n  AbortError: AbortError,\n}\n", "", "'use strict'\nvar http2 = require('http2')\nvar errors = require('./errors')\nvar faunaErrors = require('../errors')\nvar util = require('../_util')\n\nvar STREAM_PREFIX = 'stream::'\n\n/**\n * Http client adapter built around NodeJS http2 module.\n *\n * @constructor\n * @param {object} options Http2Adapter options.\n * @param {number} options.http2SessionIdleTime The time (in milliseconds) that\n * an HTTP2 session may live when there's no activity.\n * @private\n */\nfunction Http2Adapter(options) {\n  /**\n   * Identifies a type of adapter.\n   *\n   * @type {string}\n   */\n  this.type = 'http2'\n  /**\n   * Serves for reusing http2 sessions between multiple calls.\n   *\n   * @type {object}\n   * @private\n   */\n  this._sessionMap = {}\n  /**\n   * The time (in ms) that an HTTP2 session may live when there's no activity.\n   *\n   * @type {number}\n   * @private\n   */\n  this._http2SessionIdleTime = options.http2SessionIdleTime\n  /**\n   * Indicates whether the .close method has been called.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this._closed = false\n}\n\n/**\n * Resolves ClientHttp2Session to be reused across multiple requests.\n *\n * @param {string} origin Request origin to connect to.\n * @param {?boolean} isStreaming Whether it's a streaming request. A separate session\n * is created for streaming requests to avoid shared resources with regular\n * ones for the purpose of reliability.\n * @returns {object} An interface to operate with HTTP2 session.\n */\nHttp2Adapter.prototype._resolveSessionFor = function(origin, isStreaming) {\n  var sessionKey = isStreaming ? STREAM_PREFIX + origin : origin\n\n  if (this._sessionMap[sessionKey]) {\n    return this._sessionMap[sessionKey]\n  }\n\n  var self = this\n  var timerId = null\n  var ongoingRequests = 0\n\n  var cleanup = function() {\n    self._cleanupSessionFor(origin, isStreaming)\n  }\n\n  var clearInactivityTimeout = function() {\n    if (timerId) {\n      clearTimeout(timerId)\n      timerId = null\n    }\n  }\n\n  var setInactivityTimeout = function() {\n    clearInactivityTimeout()\n\n    if (self._http2SessionIdleTime === Infinity) {\n      return\n    }\n\n    var onTimeout = function() {\n      timerId = null\n\n      if (ongoingRequests === 0) {\n        cleanup()\n      }\n    }\n\n    timerId = setTimeout(onTimeout, self._http2SessionIdleTime)\n  }\n\n  var close = function(force) {\n    clearInactivityTimeout()\n\n    var shouldDestroy = force || isStreaming\n\n    if (shouldDestroy) {\n      session.destroy()\n\n      return Promise.resolve()\n    }\n\n    return new Promise(function(resolve) {\n      session.close(resolve)\n    })\n  }\n\n  var onRequestStart = function() {\n    ++ongoingRequests\n    clearInactivityTimeout()\n  }\n\n  var onRequestEnd = function() {\n    --ongoingRequests\n\n    var noOngoingRequests = ongoingRequests === 0\n    var isSessionClosed = self._closed || session.closed || session.destroyed\n\n    if (noOngoingRequests && !isSessionClosed) {\n      setInactivityTimeout()\n    }\n  }\n\n  var session = http2\n    .connect(origin)\n    .once('error', cleanup)\n    .once('goaway', cleanup)\n  var sessionInterface = {\n    session: session,\n    close: close,\n    onRequestStart: onRequestStart,\n    onRequestEnd: onRequestEnd,\n  }\n\n  this._sessionMap[sessionKey] = sessionInterface\n\n  return sessionInterface\n}\n\n/**\n * Performs cleanup for broken session.\n *\n * @param {string} origin Request origin to connect to.\n * @param {?boolean} isStreaming Whether it's a streaming request.\n * @returns {void}\n */\nHttp2Adapter.prototype._cleanupSessionFor = function(origin, isStreaming) {\n  var sessionKey = isStreaming ? STREAM_PREFIX + origin : origin\n\n  if (this._sessionMap[sessionKey]) {\n    this._sessionMap[sessionKey].session.close()\n    delete this._sessionMap[sessionKey]\n  }\n}\n\n/**\n * Issues http requests using http2 module.\n *\n * @param {object} options Request options.\n * @param {string} options.origin Request origin.\n * @param {string} options.path Request path.\n * @param {?object} options.query Request query.\n * @param {string} options.method Request method.\n * @param {?object} options.headers Request headers.\n * @param {?string} options.body Request body utf8 string.\n * @params {?object} options.streamConsumer Stream consumer.\n * @param {?object} options.signal Abort signal object.\n * @param {?number} options.timeout Request timeout.\n * @returns {Promise} Request result.\n */\nHttp2Adapter.prototype.execute = function(options) {\n  if (this._closed) {\n    return Promise.reject(\n      new faunaErrors.ClientClosed(\n        'The Client has already been closed',\n        'No subsequent requests can be issued after the .close method is called. ' +\n          'Consider creating a new Client instance'\n      )\n    )\n  }\n\n  var self = this\n  var isStreaming = options.streamConsumer != null\n\n  return new Promise(function(resolvePromise, rejectPromise) {\n    var isPromiseSettled = false\n    var isCanceled = false\n\n    var resolve = function(value) {\n      isPromiseSettled = true\n      resolvePromise(value)\n    }\n\n    // If an error has occurred after the Promise is settled\n    // we need to call streamConsumer.onError instead of reject function.\n    // Possible scenario is aborting request when stream is already being consumed.\n    var rejectOrOnError = function(error) {\n      var remapped = remapHttp2Error({ error, isClosed: self._closed })\n\n      if (isPromiseSettled && isStreaming) {\n        return options.streamConsumer.onError(remapped)\n      }\n\n      isPromiseSettled = true\n      rejectPromise(remapped)\n    }\n\n    var onSettled = function() {\n      sessionInterface.onRequestEnd()\n\n      if (options.signal) {\n        options.signal.removeEventListener('abort', onAbort)\n      }\n    }\n\n    var onError = function(error) {\n      onSettled()\n      rejectOrOnError(error)\n    }\n\n    var onAbort = function() {\n      isCanceled = true\n      onSettled()\n      request.close(http2.constants.NGHTTP2_CANCEL)\n      rejectOrOnError(new errors.AbortError())\n    }\n\n    var onTimeout = function() {\n      isCanceled = true\n      onSettled()\n      request.close(http2.constants.NGHTTP2_CANCEL)\n      rejectOrOnError(new errors.TimeoutError())\n    }\n\n    var onResponse = function(responseHeaders) {\n      var status = responseHeaders[http2.constants.HTTP2_HEADER_STATUS]\n      var isOkStatus = status >= 200 && status < 400\n      var processStream = isOkStatus && isStreaming\n      var responseBody = ''\n\n      var onData = function(chunk) {\n        if (processStream) {\n          return options.streamConsumer.onData(chunk)\n        }\n\n        responseBody += chunk\n      }\n\n      var onEnd = function() {\n        if (!isCanceled) {\n          onSettled()\n        }\n\n        if (!processStream) {\n          return resolve({\n            body: responseBody,\n            headers: responseHeaders,\n            status: status,\n          })\n        }\n\n        // Call .onError with TypeError only if the request hasn't been canceled\n        // and the Client hasn't been closed in order to align on how\n        // FetchAdapter works - it throws the TypeError due to underlying fetch API mechanics.\n        if (!isCanceled && !self._closed) {\n          options.streamConsumer.onError(new TypeError('network error'))\n        }\n      }\n\n      if (processStream) {\n        resolve({\n          // Syntactic stream representation.\n          body: '[stream]',\n          headers: responseHeaders,\n          status: status,\n        })\n      }\n\n      request.on('data', onData).on('end', onEnd)\n    }\n\n    try {\n      var pathname =\n        (options.path[0] === '/' ? options.path : '/' + options.path) +\n        util.querystringify(options.query, '?')\n      var requestHeaders = Object.assign({}, options.headers, {\n        [http2.constants.HTTP2_HEADER_PATH]: pathname,\n        [http2.constants.HTTP2_HEADER_METHOD]: options.method,\n      })\n      var sessionInterface = self._resolveSessionFor(\n        options.origin,\n        isStreaming\n      )\n      var request = sessionInterface.session\n        .request(requestHeaders)\n        .setEncoding('utf8')\n        .on('error', onError)\n        .on('response', onResponse)\n\n      sessionInterface.onRequestStart()\n\n      // Set up timeout only if no signal provided.\n      if (!options.signal && options.timeout) {\n        request.setTimeout(options.timeout, onTimeout)\n      }\n\n      if (options.signal) {\n        options.signal.addEventListener('abort', onAbort)\n      }\n\n      if (options.body != null) {\n        request.write(options.body)\n      }\n\n      request.end()\n    } catch (error) {\n      self._cleanupSessionFor(options.origin, isStreaming)\n      rejectOrOnError(error)\n    }\n  })\n}\n\n/**\n * Moves to the closed state, cleans up ongoing HTTP2 sessions if any.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Whether to force resources clean up.\n * @returns {Promise<void>}\n */\nHttp2Adapter.prototype.close = function(opts) {\n  opts = opts || {}\n\n  this._closed = true\n\n  var noop = function() {}\n\n  return Promise.all(\n    Object.values(this._sessionMap).map(function(sessionInterface) {\n      return sessionInterface.close(opts.force)\n    })\n  ).then(noop)\n}\n\n/**\n * Remaps internal NodeJS error into ClientClosed one.\n *\n * @private\n * @param {Error} error Error object.\n * @returns {Error} Remapped error.\n */\nfunction remapHttp2Error({ error, isClosed }) {\n  var shouldRemap =\n    isClosed &&\n    (error.code === 'ERR_HTTP2_GOAWAY_SESSION' ||\n      error.code === 'ERR_HTTP2_STREAM_CANCEL')\n\n  if (shouldRemap) {\n    return new faunaErrors.ClientClosed(\n      'The request is aborted due to the Client#close call'\n    )\n  }\n\n  return error\n}\n\nmodule.exports = Http2Adapter\n", "/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap()\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap()\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event)\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            )\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault()\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    })\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true })\n\n    // Define accessors\n    const keys = Object.keys(event)\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key))\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation()\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        data.immediateStopped = true\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation()\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this))\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this))\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype)\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event)\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto)\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event)\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    })\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key)\n            const isFunc = typeof descriptor.value === \"function\"\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            )\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto)\n        wrappers.set(proto, wrapper)\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nexport function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event))\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nexport function isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nexport function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nexport function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nexport function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener\n}\n", "import {\n    isStopped,\n    setCurrentTarget,\n    setEventPhase,\n    setPassiveListener,\n    wrapEvent,\n} from \"./event.mjs\"\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap()\n\n// Listener types\nconst CAPTURE = 1\nconst BUBBLE = 2\nconst ATTRIBUTE = 3\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget)\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this)\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this)\n\n            // Traverse to the tail while removing old value.\n            let prev = null\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next)\n                    } else {\n                        listeners.delete(eventName)\n                    }\n                } else {\n                    prev = node\n                }\n\n                node = node.next\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                }\n                if (prev === null) {\n                    listeners.set(eventName, newNode)\n                } else {\n                    prev.next = newNode\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    )\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this)\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    })\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i])\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map())\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length)\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i]\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this)\n        const optionsIsObj = isObject(options)\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        }\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName)\n        if (node === undefined) {\n            listeners.set(eventName, newNode)\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node\n            node = node.next\n        }\n\n        // Add it.\n        prev.next = newNode\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this)\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n\n        let prev = null\n        let node = listeners.get(eventName)\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n                return\n            }\n\n            prev = node\n            node = node.next\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this)\n        const eventName = event.type\n        let node = listeners.get(eventName)\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event)\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n            } else {\n                prev = node\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            )\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent)\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err)\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent)\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next\n        }\n        setPassiveListener(wrappedEvent, null)\n        setEventPhase(wrappedEvent, 0)\n        setCurrentTarget(wrappedEvent, null)\n\n        return !wrappedEvent.defaultPrevented\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype)\n}\n\nexport { defineEventAttribute, EventTarget }\nexport default EventTarget\n", "import {\n    // Event,\n    EventTarget,\n    // Type,\n    defineEventAttribute,\n} from \"event-target-shim\"\n\n// Known Limitation\n//   Use `any` because the type of `AbortSignal` in `lib.dom.d.ts` is wrong and\n//   to make assignable our `AbortSignal` into that.\n//   https://github.com/Microsoft/TSJS-lib-generator/pull/623\ntype Events = {\n    abort: any // Event & Type<\"abort\">\n}\ntype EventAttributes = {\n    onabort: any // Event & Type<\"abort\">\n}\n\n/**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */\nexport default class AbortSignal extends EventTarget<Events, EventAttributes> {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */\n    public constructor() {\n        super()\n        throw new TypeError(\"AbortSignal cannot be constructed directly\")\n    }\n\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */\n    public get aborted(): boolean {\n        const aborted = abortedFlags.get(this)\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(\n                `Expected 'this' to be an 'AbortSignal' object, but got ${\n                    this === null ? \"null\" : typeof this\n                }`,\n            )\n        }\n        return aborted\n    }\n}\ndefineEventAttribute(AbortSignal.prototype, \"abort\")\n\n/**\n * Create an AbortSignal object.\n */\nexport function createAbortSignal(): AbortSignal {\n    const signal = Object.create(AbortSignal.prototype)\n    EventTarget.call(signal)\n    abortedFlags.set(signal, false)\n    return signal\n}\n\n/**\n * Abort a given signal.\n */\nexport function abortSignal(signal: AbortSignal): void {\n    if (abortedFlags.get(signal) !== false) {\n        return\n    }\n\n    abortedFlags.set(signal, true)\n    signal.dispatchEvent<\"abort\">({ type: \"abort\" })\n}\n\n/**\n * Aborted flag for each instances.\n */\nconst abortedFlags = new WeakMap<AbortSignal, boolean>()\n\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: { enumerable: true },\n})\n\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\",\n    })\n}\n", "import AbortSignal, { abortSignal, createAbortSignal } from \"./abort-signal\"\n\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */\nexport default class AbortController {\n    /**\n     * Initialize this controller.\n     */\n    public constructor() {\n        signals.set(this, createAbortSignal())\n    }\n\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */\n    public get signal(): AbortSignal {\n        return getSignal(this)\n    }\n\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */\n    public abort(): void {\n        abortSignal(getSignal(this))\n    }\n}\n\n/**\n * Associated signals.\n */\nconst signals = new WeakMap<AbortController, AbortSignal>()\n\n/**\n * Get the associated signal of a given controller.\n */\nfunction getSignal(controller: AbortController): AbortSignal {\n    const signal = signals.get(controller)\n    if (signal == null) {\n        throw new TypeError(\n            `Expected 'this' to be an 'AbortController' object, but got ${\n                controller === null ? \"null\" : typeof controller\n            }`,\n        )\n    }\n    return signal\n}\n\n// Properties should be enumerable.\nObject.defineProperties(AbortController.prototype, {\n    signal: { enumerable: true },\n    abort: { enumerable: true },\n})\n\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\",\n    })\n}\n\nexport { AbortController, AbortSignal }\n", "/*globals require, self, window */\n\"use strict\"\n\nconst ac = require(\"./dist/abort-controller\")\n\n/*eslint-disable @mysticatea/prettier */\nconst g =\n    typeof self !== \"undefined\" ? self :\n    typeof window !== \"undefined\" ? window :\n    typeof global !== \"undefined\" ? global :\n    /* otherwise */ undefined\n/*eslint-enable @mysticatea/prettier */\n\nif (g) {\n    if (typeof g.AbortController === \"undefined\") {\n        g.AbortController = ac.AbortController\n    }\n    if (typeof g.AbortSignal === \"undefined\") {\n        g.AbortSignal = ac.AbortSignal\n    }\n}\n", "", "", "'use strict'\nrequire('abort-controller/polyfill')\nvar util = require('../_util')\nvar faunaErrors = require('../errors')\nvar errors = require('./errors')\n\n/**\n * Http client adapter built around fetch API.\n *\n * @constructor\n * @param {?object} options FetchAdapter options.\n * @param {?boolean} options.keepAlive Whether use keep-alive connection.\n * @param {?boolean} options.isHttps Whether use https connection.\n * @param {?function} options.fetch Fetch compatible API.\n * @private\n */\nfunction FetchAdapter(options) {\n  options = options || {}\n\n  /**\n   * Identifies a type of adapter.\n   *\n   * @type {string}\n   */\n  this.type = 'fetch'\n  /**\n   * Indicates whether the .close method has been called.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this._closed = false\n  this._fetch = util.resolveFetch(options.fetch)\n  /**\n   * A map that tracks ongoing requests to be able to cancel them when\n   * the .close method is called.\n   *\n   * @type {Map<Object, Object>}\n   * @private\n   */\n  this._pendingRequests = new Map()\n\n  if (util.isNodeEnv() && options.keepAlive) {\n    this._keepAliveEnabledAgent = new (options.isHttps\n      ? require('https')\n      : require('http')\n    ).Agent({ keepAlive: true })\n  }\n}\n\n/**\n * Issues http requests using fetch API.\n *\n * @param {object} options Request options.\n * @param {string} options.origin Request origin.\n * @param {string} options.path Request path.\n * @param {?object} options.query Request query.\n * @param {string} options.method Request method.\n * @param {?object} options.headers Request headers.\n * @param {?string} options.body Request body utf8 string.\n * @params {?object} options.streamConsumer Stream consumer.\n * @param {?object} options.signal Abort signal object.\n * @param {?number} options.timeout Request timeout.\n * @returns {Promise} Request result.\n */\nFetchAdapter.prototype.execute = function(options) {\n  if (this._closed) {\n    return Promise.reject(\n      new faunaErrors.ClientClosed(\n        'The Client has already been closed',\n        'No subsequent requests can be issued after the .close method is called. ' +\n          'Consider creating a new Client instance'\n      )\n    )\n  }\n\n  var self = this\n  var timerId = null\n  var isStreaming = options.streamConsumer != null\n  // Use timeout only if no signal provided\n  var useTimeout = !options.signal && !!options.timeout\n  var ctrl = new AbortController()\n  var pendingRequest = {\n    isStreaming: isStreaming,\n    isAbortedByClose: false,\n    // This callback can be set during the .close method call to be notified\n    // on request ending to resolve .close's Promise only after all of the requests complete.\n    onComplete: null,\n  }\n\n  self._pendingRequests.set(ctrl, pendingRequest)\n\n  var onComplete = function() {\n    self._pendingRequests.delete(ctrl)\n\n    if (options.signal) {\n      options.signal.removeEventListener('abort', onAbort)\n    }\n\n    if (pendingRequest.onComplete) {\n      pendingRequest.onComplete()\n    }\n  }\n\n  var onSettle = function() {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n  }\n\n  var onResponse = function(response) {\n    onSettle()\n\n    var headers = responseHeadersAsObject(response.headers)\n    var processStream = isStreaming && response.ok\n\n    // Regular request - return text content immediately.\n    if (!processStream) {\n      onComplete()\n\n      return response.text().then(function(content) {\n        return {\n          body: content,\n          headers: headers,\n          status: response.status,\n        }\n      })\n    }\n\n    attachStreamConsumer(response, options.streamConsumer, onComplete)\n\n    return {\n      // Syntactic stream representation.\n      body: '[stream]',\n      headers: headers,\n      status: response.status,\n    }\n  }\n\n  var onError = function(error) {\n    onSettle()\n    onComplete()\n\n    return Promise.reject(\n      remapIfAbortError(error, function() {\n        if (!isStreaming && pendingRequest.isAbortedByClose) {\n          return new faunaErrors.ClientClosed(\n            'The request is aborted due to the Client#close ' +\n              'call with the force=true option'\n          )\n        }\n\n        return useTimeout ? new errors.TimeoutError() : new errors.AbortError()\n      })\n    )\n  }\n\n  var onAbort = function() {\n    ctrl.abort()\n  }\n\n  if (useTimeout) {\n    timerId = setTimeout(function() {\n      timerId = null\n      ctrl.abort()\n    }, options.timeout)\n  }\n\n  if (options.signal) {\n    options.signal.addEventListener('abort', onAbort)\n  }\n\n  return this._fetch(\n    util.formatUrl(options.origin, options.path, options.query),\n    {\n      method: options.method,\n      headers: options.headers,\n      body: options.body,\n      agent: this._keepAliveEnabledAgent,\n      signal: ctrl.signal,\n    }\n  )\n    .then(onResponse)\n    .catch(onError)\n}\n\n/**\n * Moves to the closed state, aborts streaming requests.\n * Aborts non-streaming requests if force is true,\n * waits until they complete otherwise.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Whether to force resources clean up.\n * @returns {Promise<void>}\n */\nFetchAdapter.prototype.close = function(opts) {\n  opts = opts || {}\n\n  this._closed = true\n\n  var promises = []\n\n  var abortOrWait = function(pendingRequest, ctrl) {\n    var shouldAbort = pendingRequest.isStreaming || opts.force\n\n    if (shouldAbort) {\n      pendingRequest.isAbortedByClose = true\n\n      return ctrl.abort()\n    }\n\n    promises.push(\n      new Promise(function(resolve) {\n        pendingRequest.onComplete = resolve\n      })\n    )\n  }\n\n  this._pendingRequests.forEach(abortOrWait)\n\n  var noop = function() {}\n\n  return Promise.all(promises).then(noop)\n}\n\n/**\n * Attaches streamConsumer specifically either for browser or NodeJS.\n * Minimum browser compatibility based on current code:\n * Chrome                52\n * Edge                  79\n * Firefox               65\n * IE                    NA\n * Opera                 39\n * Safari                10.1\n * Android Webview       52\n * Chrome for Android    52\n * Firefox for Android   65\n * Opera for Android     41\n * Safari on iOS         10.3\n * Samsung Internet      6.0\n *\n * @param {object} response Fetch response.\n * @param {object} consumer StreamConsumer.\n * @param {function} onComplete Callback fired when the stream ends or errors.\n * @private\n */\nfunction attachStreamConsumer(response, consumer, onComplete) {\n  var onError = function(error) {\n    onComplete()\n    consumer.onError(remapIfAbortError(error))\n  }\n\n  if (util.isNodeEnv()) {\n    response.body\n      .on('error', onError)\n      .on('data', consumer.onData)\n      .on('end', function() {\n        onComplete()\n        // To simulate how browsers behave in case of \"end\" event.\n        consumer.onError(new TypeError('network error'))\n      })\n\n    return\n  }\n\n  // ATTENTION: The following code is meant to run in browsers and is not\n  // covered by current test automation. Manual testing on major browsers\n  // is required after making changes to it.\n  try {\n    var reader = response.body.getReader()\n    var decoder = new TextDecoder('utf-8')\n\n    function pump() {\n      return reader.read().then(function(msg) {\n        if (!msg.done) {\n          var chunk = decoder.decode(msg.value, { stream: true })\n\n          consumer.onData(chunk)\n\n          return pump()\n        }\n\n        onComplete()\n        // In case a browser hasn't thrown the \"network error\" on stream's end\n        // we need to force it in order to provide a way to handle stream's\n        // ending.\n        consumer.onError(new TypeError('network error'))\n      })\n    }\n\n    pump().catch(onError)\n  } catch (err) {\n    throw new faunaErrors.StreamsNotSupported(\n      'Please, consider providing a Fetch API-compatible function ' +\n        'with streamable response bodies. ' +\n        err\n    )\n  }\n}\n\n/**\n * Remaps an AbortError thrown by fetch to HttpClient's one\n * for timeout and abort use-cases.\n *\n * @param {Error} error Error object.\n * @param {?function} errorFactory A factory called to construct an abort error.\n * @returns {Error} Remapped or original error.\n * @private\n */\nfunction remapIfAbortError(error, errorFactory) {\n  var isAbortError = error && error.name === 'AbortError'\n\n  if (!isAbortError) {\n    return error\n  }\n\n  if (errorFactory) {\n    return errorFactory()\n  }\n\n  return new errors.AbortError()\n}\n\n/**\n * Converts fetch Headers object into POJO.\n *\n * @param {object} headers Fetch Headers object.\n * @returns {object} Response headers as a plain object.\n * @private\n */\nfunction responseHeadersAsObject(headers) {\n  var result = {}\n\n  for (var header of headers.entries()) {\n    var key = header[0]\n    var value = header[1]\n\n    result[key] = value\n  }\n\n  return result\n}\n\nmodule.exports = FetchAdapter\n", "", "'use strict'\nvar packageJson = require('../../package.json')\nconst { getBrowserOsDetails } = require('../_util')\nvar util = require('../_util')\nvar errors = require('./errors')\n\n/**\n * The driver's internal HTTP client.\n *\n * @constructor\n * @param {Object} options Same as the {@link Client} options.\n * @private\n */\nfunction HttpClient(options) {\n  var isHttps = options.scheme === 'https'\n\n  // If the port is a falsy value - replace it with default one.\n  if (!options.port) {\n    options.port = isHttps ? 443 : 80\n  }\n\n  // HTTP2 adapter is applicable only if it's NodeJS env and\n  // no fetch API override provided (to preserve backward-compatibility).\n  var useHttp2Adapter = !options.fetch && util.isNodeEnv() && isHttp2Supported()\n\n  this._adapter = useHttp2Adapter\n    ? new (require('./http2Adapter'))({\n        http2SessionIdleTime: options.http2SessionIdleTime,\n      })\n    : new (require('./fetchAdapter'))({\n        isHttps: isHttps,\n        fetch: options.fetch,\n        keepAlive: options.keepAlive,\n      })\n  this._baseUrl = options.scheme + '://' + options.domain + ':' + options.port\n  this._secret = options.secret\n  this._headers = Object.assign({}, options.headers, getDefaultHeaders())\n  this._queryTimeout = options.queryTimeout\n  this._lastSeen = null\n  this._timeout = Math.floor(options.timeout * 1000)\n}\n\n/**\n * Returns last seen transaction time.\n *\n * @returns {number} The last seen transaction time.\n */\nHttpClient.prototype.getLastTxnTime = function() {\n  return this._lastSeen\n}\n\n/**\n * Sets the last seen transaction if the given timestamp is greater than then\n * know last seen timestamp.\n *\n * @param {number} time transaction timestamp.\n */\nHttpClient.prototype.syncLastTxnTime = function(time) {\n  if (this._lastSeen == null || this._lastSeen < time) {\n    this._lastSeen = time\n  }\n}\n\n/**\n * Cleans up any held resources.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Whether to force resources clean up.\n * @returns {Promise<void>}\n */\nHttpClient.prototype.close = function(opts) {\n  return this._adapter.close(opts)\n}\n\n/**\n * Executes an HTTP request.\n *\n * @param {?object} options Request parameters.\n * @param {?string} options.method Request method.\n * @param {?string} options.path Request path.\n * @param {?string} options.body Request body.\n * @param {?object} options.query Request query.\n * @params {?object} options.streamConsumer Stream consumer, if presented\n * the request will be \"streamed\" into streamConsumer.onData function.\n * @params {function} options.streamConsumer.onData Function called with a chunk of data.\n * @params {function} options.streamConsumer.onError Function called\n * when an error occurred.\n * when the stream is ended.\n * @param {?object} options.signal Abort signal object.\n * @param {?object} options.fetch Fetch API compatible function.\n * @param {?object} options.secret FaunaDB secret.\n * @param {?object} options.queryTimeout FaunaDB query timeout.\n * @returns {Promise} The response promise.\n */\nHttpClient.prototype.execute = function(options) {\n  options = options || {}\n\n  var invalidStreamConsumer =\n    options.streamConsumer &&\n    (typeof options.streamConsumer.onData !== 'function' ||\n      typeof options.streamConsumer.onError !== 'function')\n\n  if (invalidStreamConsumer) {\n    return Promise.reject(new TypeError('Invalid \"streamConsumer\" provided'))\n  }\n\n  var secret = options.secret || this._secret\n  var queryTimeout = options.queryTimeout || this._queryTimeout\n  var headers = this._headers\n\n  headers['Authorization'] = secret && secretHeader(secret)\n  headers['X-Last-Seen-Txn'] = this._lastSeen\n  headers['X-Query-Timeout'] = queryTimeout\n\n  return this._adapter.execute({\n    origin: this._baseUrl,\n    path: options.path || '/',\n    query: options.query,\n    method: options.method || 'GET',\n    headers: util.removeNullAndUndefinedValues(headers),\n    body: options.body,\n    signal: options.signal,\n    timeout: this._timeout,\n    streamConsumer: options.streamConsumer,\n  })\n}\n\nfunction secretHeader(secret) {\n  return 'Bearer ' + secret\n}\n\n/** @ignore */\nfunction getDefaultHeaders() {\n  var driverEnv = {\n    driver: ['javascript', packageJson.version].join('-'),\n  }\n\n  var isServiceWorker\n\n  try {\n    isServiceWorker = global instanceof ServiceWorkerGlobalScope\n  } catch (error) {\n    isServiceWorker = false\n  }\n\n  try {\n    if (util.isNodeEnv()) {\n      driverEnv.runtime = ['nodejs', process.version].join('-')\n      driverEnv.env = util.getNodeRuntimeEnv()\n      var os = require('os')\n      driverEnv.os = [os.platform(), os.release()].join('-')\n    } else if (isServiceWorker) {\n      driverEnv.runtime = 'Service Worker'\n    } else {\n      driverEnv.runtime = util.getBrowserDetails()\n      driverEnv.env = 'browser'\n      driverEnv.os = getBrowserOsDetails()\n    }\n  } catch (_) {}\n\n  var headers = {\n    'X-FaunaDB-API-Version': packageJson.apiVersion,\n  }\n\n  // TODO: api cors must be enabled to accept header X-Driver-Env\n  if (util.isNodeEnv()) {\n    headers['X-Driver-Env'] = Object.keys(driverEnv)\n      .map(key => [key, driverEnv[key].toLowerCase()].join('='))\n      .join('; ')\n  }\n  return headers\n}\n\nfunction isHttp2Supported() {\n  try {\n    require('http2')\n\n    return true\n  } catch (_) {\n    return false\n  }\n}\n\nmodule.exports = {\n  HttpClient: HttpClient,\n  TimeoutError: errors.TimeoutError,\n  AbortError: errors.AbortError,\n}\n", "'use strict'\n\n/** @module stream */\n\n// NOTE: Although implemented in a separate module, streaming shares internal\n// responsibilities with both Client and HTTP interfaces, such as updating last\n// seen transaction timestamp. Therefore, this implementation\n// sometimes breaks encapsulation and calls internal getters and methods. As a\n// general rule: it's okay to call internal methods. You can interpret this\n// as calling for a package visible method in languages with fine-grained\n// visibility control. However, DO NOT change any internal state from outside of\n// its context as it'd most certainly lead to errors.\n\nrequire('abort-controller/polyfill')\nvar RequestResult = require('./RequestResult')\nvar errors = require('./errors')\nvar json = require('./_json')\nvar http = require('./_http')\nvar q = require('./query')\nvar util = require('./_util')\n\nvar DefaultEvents = ['start', 'error', 'version', 'history_rewrite']\nvar DocumentStreamEvents = DefaultEvents.concat(['snapshot'])\n\n/**\n * The internal stream client interface. This class handles the network side of\n * a stream subscription.\n *\n * @constructor\n * @param {Client} client The FaunaDB client.\n * @param {module:query~ExprArg} expression The FQL expression you are subscribing to.\n * @param {module:stream~Options} options The stream options.\n * @param {function} onEvent The stream event's callback function.\n * @private\n */\nfunction StreamClient(client, expression, options, onEvent) {\n  options = util.applyDefaults(options, {\n    fields: null,\n  })\n\n  this._client = client\n  this._onEvent = onEvent\n  this._query = q.wrap(expression)\n  this._urlParams = options.fields ? { fields: options.fields.join(',') } : null\n  this._abort = new AbortController()\n  this._state = 'idle'\n}\n\n/**\n * Takes a snapshot of the current query. Assumes the subscribed query returns a\n * reference.\n */\nStreamClient.prototype.snapshot = function() {\n  var self = this\n  self._client\n    .query(q.Get(self._query))\n    .then(function(doc) {\n      self._onEvent({\n        type: 'snapshot',\n        event: doc,\n      })\n    })\n    .catch(function(error) {\n      self._onEvent({\n        type: 'error',\n        event: error,\n      })\n    })\n}\n\n/** Initiates the stream subscription.  */\nStreamClient.prototype.subscribe = function() {\n  var self = this\n\n  if (self._state === 'idle') {\n    self._state = 'open'\n  } else {\n    throw new Error(\n      'Subscription#start should not be called several times, ' +\n        'consider instantiating a new stream instead.'\n    )\n  }\n\n  var body = JSON.stringify(self._query)\n  var startTime = Date.now()\n  var buffer = ''\n\n  function onResponse(response) {\n    var endTime = Date.now()\n    var parsed\n\n    try {\n      parsed = json.parseJSON(response.body)\n    } catch (_) {\n      parsed = response.body\n    }\n\n    var result = new RequestResult(\n      'POST',\n      'stream',\n      self._urlParams,\n      body,\n      self._query,\n      response.body,\n      parsed,\n      response.status,\n      response.headers,\n      startTime,\n      endTime\n    )\n\n    self._client._handleRequestResult(response, result)\n  }\n\n  function onData(data) {\n    var result = json.parseJSONStreaming(buffer + data)\n\n    buffer = result.buffer\n\n    result.values.forEach(function(event) {\n      if (event.txn !== undefined) {\n        self._client.syncLastTxnTime(event.txn)\n      }\n\n      if (event.event === 'error') {\n        onError(new errors.StreamErrorEvent(event))\n      } else {\n        self._onEvent(event)\n      }\n    })\n  }\n\n  function onError(error) {\n    // AbortError is triggered as result of calling\n    // close() on a Subscription. There's no need to relay this event back up.\n    if (error instanceof http.AbortError) {\n      return\n    }\n\n    self._onEvent({\n      type: 'error',\n      event: error,\n    })\n  }\n\n  self._client._http\n    .execute({\n      method: 'POST',\n      path: 'stream',\n      body: body,\n      query: self._urlParams,\n      signal: this._abort.signal,\n      streamConsumer: {\n        onError: onError,\n        onData: onData,\n      },\n    })\n    .then(onResponse)\n    .catch(onError)\n}\n\n/** Closes the stream subscription by aborting its underlying http request. */\nStreamClient.prototype.close = function() {\n  if (this._state !== 'closed') {\n    this._state = 'closed'\n    this._abort.abort()\n  }\n}\n\n/**\n * Event dispatch interface for stream subscription.\n *\n * @constructor\n * @param {string[]} allowedEvents List of allowed events.\n * @private\n */\nfunction EventDispatcher(allowedEvents) {\n  this._allowedEvents = allowedEvents\n  this._listeners = {}\n}\n\n/** Subscribe to an event\n *\n * @param {string} type The event type.\n * @param {module:stream~Subscription~eventCalllback} callback\n *   The event's callback.\n */\nEventDispatcher.prototype.on = function(type, callback) {\n  if (this._allowedEvents.indexOf(type) === -1) {\n    throw new Error('Unknown event type: ' + type)\n  }\n  if (this._listeners[type] === undefined) {\n    this._listeners[type] = []\n  }\n  this._listeners[type].push(callback)\n}\n\n/**\n * Dispatch the given event to the appropriate listeners.\n *\n * @param {Object} event The event.\n */\nEventDispatcher.prototype.dispatch = function(event) {\n  var listeners = this._listeners[event.type]\n  if (!listeners) {\n    return\n  }\n\n  for (var i = 0; i < listeners.length; i++) {\n    listeners[i].call(null, event.event, event)\n  }\n}\n\n/**\n * Stream's start event. A stream subscription always begins with a start event.\n * Upcoming events are guaranteed to have transaction timestamps equal to or greater than\n * the stream's start timestamp.\n *\n * @event module:stream~Subscription#start\n * @type {object}\n * @property {string} type='start'\n *   The event type.\n * @property {number} txn\n *   The event's transaction timestamp.\n * @property {module:number} event\n *   The stream start timestamp.\n */\n\n/**\n * A version event occurs upon any modifications to the current state of the\n * subscribed document.\n *\n * @event module:stream~Subscription#version\n * @type {object}\n * @property {string} type='version'\n *   The event type.\n * @property {number} txn\n *   The event's transaction timestamp.\n * @property {object} event\n *   The event's data.\n */\n\n/**\n * A history rewrite event occurs upon any modifications to the history of the\n * subscribed document.\n *\n * @event module:stream~Subscription#history_rewrite\n * @type {object}\n * @property {string} type='history_rewrite'\n *   The event type.\n * @property {number} txn\n *   The event's transaction timestamp.\n * @property {object} event\n *   The event's data.\n */\n\n/**\n * A snapshot event. A snapshot event is fired once the `document` stream helper\n * finishes loading the subscribed document's snapshot data. See {@link\n * Client#stream} for more details on the `document` stream helper.\n *\n * @event module:stream~Subscription#snapshot\n * @type {object}\n * @property {string} type='snapshot'\n *   The event type.\n * @property {number} txn\n *   The event's transaction timestamp.\n * @property {object} event\n *   The event's data.\n */\n\n/**\n * An error event is fired both for client and server errors that may occur as\n * a result of a subscription.\n *\n * @event module:stream~Subscription#error\n * @type {object}\n * @property {string} type='error'\n *   The event type.\n * @property {?number} txn\n *   The event's transaction timestamp.\n * @property {Error} event\n *   The underlying error.\n */\n\n/**\n * @typedef {Object} Options\n * @property {string[]} [fields=['action', 'document', 'diff', 'prev']]\n *   The fields event fields to opt-in during stream subscription. Possible\n *   options:\n *   * 'action': The action type\n *   * 'document': The document's data\n *   * 'diff': The difference between 'document' and 'prev'\n *   * 'prev': The event's previous data\n */\n\n/**\n * The callback to be executed when an new event occurs.\n *\n * @callback module:stream~Subscription~eventCalllback\n * @param {any} data The event's data field.\n * @param {object} event The event's entire object.\n */\n\n/**\n * A stream subscription which dispatches events received to the registered\n * listener functions. This class must be constructed via {@link Client#stream}\n * method.\n *\n * @constructor\n * @param {StreamClient} client\n *   Internal stream client interface.\n * @param {EventDispatcher} dispatcher\n *   Internal event dispatcher interface.\n */\nfunction Subscription(client, dispatcher) {\n  this._client = client\n  this._dispatcher = dispatcher\n}\n\n/**\n * Subscribes to an event type.\n *\n * @param {string} event\n *   The event's type.\n * @param {module:stream~Subscription~eventCalllback} callback\n *   A callback function.\n *\n * @returns {module:stream~Subscription} This instance.\n */\nSubscription.prototype.on = function(type, callback) {\n  this._dispatcher.on(type, callback)\n  return this\n}\n\n/**\n * Initiates the underlying subscription network calls.\n * @returns {module:stream~Subscription} This instance.\n */\nSubscription.prototype.start = function() {\n  this._client.subscribe()\n  return this\n}\n\n/**\n * Stops the current subscription and closes the underlying network connection.\n */\nSubscription.prototype.close = function() {\n  this._client.close()\n}\n\n/**\n * Stream API factory function. See {@link Client#stream} for details on how to\n * use stream's public interface.\n * @private\n */\nfunction StreamAPI(client) {\n  var api = function(expression, options) {\n    var dispatcher = new EventDispatcher(DefaultEvents)\n    var streamClient = new StreamClient(client, expression, options, function(\n      event\n    ) {\n      dispatcher.dispatch(event)\n    })\n    return new Subscription(streamClient, dispatcher)\n  }\n\n  api.document = function(expression, options) {\n    var buffer = []\n    var buffering = true\n    var dispatcher = new EventDispatcher(DocumentStreamEvents)\n    var streamClient = new StreamClient(client, expression, options, onEvent)\n\n    function onEvent(event) {\n      switch (event.type) {\n        case 'start':\n          dispatcher.dispatch(event)\n          streamClient.snapshot()\n          break\n        case 'snapshot':\n          resume(event)\n          break\n        case 'error':\n          dispatcher.dispatch(event)\n          break\n        default:\n          if (buffering) {\n            buffer.push(event)\n          } else {\n            dispatcher.dispatch(event)\n          }\n      }\n    }\n\n    function resume(snapshotEvent) {\n      dispatcher.dispatch(snapshotEvent)\n      for (var i = 0; i < buffer.length; i++) {\n        var bufferedEvent = buffer[i]\n        if (bufferedEvent.txn > snapshotEvent.event.ts) {\n          dispatcher.dispatch(bufferedEvent)\n        }\n      }\n      buffering = false\n      buffer = null\n    }\n\n    return new Subscription(streamClient, dispatcher)\n  }\n\n  return api\n}\n\nmodule.exports = {\n  StreamAPI: StreamAPI,\n}\n", "'use strict'\n\nvar packageJson = require('../package.json')\nvar PageHelper = require('./PageHelper')\nvar RequestResult = require('./RequestResult')\nvar errors = require('./errors')\nvar http = require('./_http')\nvar json = require('./_json')\nvar query = require('./query')\nvar stream = require('./stream')\nvar util = require('./_util')\nvar values = require('./values')\n\nvar notifyAboutNewVersion = util.notifyAboutNewVersion()\n\n/**\n * The callback that will be executed after every completed request.\n *\n * @callback Client~observerCallback\n * @param {RequestResult} res\n */\n\n/**\n * **WARNING: This is an experimental feature. There are no guarantees to\n * its API stability and/or service availability. DO NOT USE IT IN\n * PRODUCTION**.\n *\n * Creates a subscription to the result of the given read-only expression. When\n * executed, the expression must only perform reads and produce a single\n * streamable type, such as a reference or a version. Expressions that attempt\n * to perform writes or produce non-streamable types will result in an error.\n * Otherwise, any expression can be used to initiate a stream, including\n * user-defined function calls.\n *\n * The subscription returned by this method does not issue any requests until\n * the {@link module:stream~Subscription#start} method is called. Make sure to\n * subscribe to the events of interest, otherwise the received events are simply\n * ignored. For example:\n *\n * ```\n * client.stream(document.ref)\n *   .on('version', version => console.log(version))\n *   .on('error', error => console.log(error))\n *   .start()\n * ```\n *\n * Please note that streams are not temporal, meaning that there is no option to\n * configure its starting timestamp. The stream will, however, state its initial\n * subscription time via the {@link module:stream~Subscription#event:start}\n * event. A common programming mistake is to read a document, then initiate a\n * subscription. This approach can miss events that occurred between the initial\n * read and the subscription request. To prevent event loss, make sure the\n * subscription has started before performing a data load. The following example\n * buffer events until the document's data is loaded:\n *\n * ```\n * var buffer = []\n * var loaded = false\n *\n * client.stream(document.ref)\n *   .on('start', ts => {\n *     loadData(ts).then(data => {\n *       processData(data)\n *       processBuffer(buffer)\n *       loaded = true\n *     })\n *   })\n *   .on('version', version => {\n *     if (loaded) {\n *       processVersion(version)\n *     } else {\n *       buffer.push(version)\n *     }\n *   })\n *   .start()\n * ```\n *\n * The reduce boilerplate, the `document` helper implements a similar\n * functionality, except it discards events prior to the document's snapshot\n * time. The expression given to this helper must be a reference as it\n * internally runs a {@link module:query~Get} call with it. The example above\n * can be rewritten as:\n *\n * ```\n * client.stream.document(document.ref)\n *   .on('snapshot', data => processData(data))\n *   .on('version', version => processVersion(version))\n *   .start()\n * ```\n *\n * Be aware that streams are not available in all browsers. If the client can't\n * initiate a stream, an error event with the {@link\n * module:errors~StreamsNotSupported} error will be emmited.\n *\n * To stop a subscription, call the {@link module:stream~Subscription#close}\n * method:\n *\n * ```\n * var subscription = client.stream(document.ref)\n *   .on('version', version => processVersion(version))\n *   .start()\n *\n * // ...\n * subscription.close()\n * ```\n *\n * @param {module:query~ExprArg} expression\n *   The expression to subscribe to. Created from {@link module:query}\n *   functions.\n *\n * @param {?module:stream~Options} options\n *   Object that configures the stream.\n *\n * @property {function} document\n *  A document stream helper. See {@link Client#stream} for more information.\n *\n * @see module:stream~Subscription\n *\n * @function\n * @name Client#stream\n * @returns {module:stream~Subscription} A new subscription instance.\n */\n\n/**\n * A client for interacting with FaunaDB.\n *\n * Users will mainly call the {@link Client#query} method to execute queries, or\n * the {@link Client#stream} method to subscribe to streams.\n *\n * See the [FaunaDB Documentation](https://fauna.com/documentation) for detailed examples.\n *\n * All methods return promises containing a JSON object that represents the FaunaDB response.\n * Literal types in the response object will remain as strings, Arrays, and objects.\n * FaunaDB types, such as {@link Ref}, {@link SetRef}, {@link FaunaTime}, and {@link FaunaDate} will\n * be converted into the appropriate object.\n *\n * (So if a response contains `{ \"@ref\": \"collections/frogs/123\" }`,\n * it will be returned as `new Ref(\"collections/frogs/123\")`.)\n *\n * @constructor\n * @param {?Object} options\n *   Object that configures this FaunaDB client.\n * @param {?string} options.domain\n *   Base URL for the FaunaDB server.\n * @param {?{ string: string }} options.headers\n *   Base URL for the FaunaDB server.\n * @param {?('http'|'https')} options.scheme\n *   HTTP scheme to use.\n * @param {?number} options.port\n *   Port of the FaunaDB server.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @param {?number} options.timeout Read timeout in seconds.\n * @param {?Client~observerCallback} options.observer\n *   Callback that will be called after every completed request.\n * @param {?boolean} options.keepAlive\n *   Configures http/https keepAlive option (ignored in browser environments)\n * @param {?fetch} options.fetch\n *   a fetch compatible [API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for making a request\n * @param {?number} options.queryTimeout\n *   Sets the maximum amount of time (in milliseconds) for query execution on the server\n * @param {?number} options.http2SessionIdleTime\n *   Sets the maximum amount of time (in milliseconds) an HTTP2 session may live\n *   when there's no activity. Must either be a non-negative integer, or Infinity to allow the\n *   HTTP2 session to live indefinitely (use `Client#close` to manually terminate the client).\n *   Only applicable for NodeJS environment (when http2 module is used). Default is 500ms;\n *   can also be configured via the FAUNADB_HTTP2_SESSION_IDLE_TIME environment variable\n *   which has the highest priority and overrides the option passed into the Client constructor.\n * @param {?boolean} options.checkNewVersion\n *   Enabled by default. Prints a message to the terminal when a newer driver is available.\n */\nfunction Client(options) {\n  var http2SessionIdleTime = getHttp2SessionIdleTime()\n\n  options = util.applyDefaults(options, {\n    domain: 'db.fauna.com',\n    scheme: 'https',\n    port: null,\n    secret: null,\n    timeout: 60,\n    observer: null,\n    keepAlive: true,\n    headers: {},\n    fetch: undefined,\n    queryTimeout: null,\n    http2SessionIdleTime: http2SessionIdleTime.value,\n    checkNewVersion: true,\n  })\n  notifyAboutNewVersion(options.checkNewVersion)\n\n  if (http2SessionIdleTime.shouldOverride) {\n    options.http2SessionIdleTime = http2SessionIdleTime.value\n  }\n\n  this._observer = options.observer\n  this._http = new http.HttpClient(options)\n  this.stream = stream.StreamAPI(this)\n}\n\n/**\n * Current API version.\n *\n * @type {string}\n */\nClient.apiVersion = packageJson.apiVersion\n\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} FaunaDB response object.\n */\nClient.prototype.query = function(expression, options) {\n  return this._execute('POST', '', query.wrap(expression), null, options)\n}\n\n/**\n * Returns a {@link PageHelper} for the given Query expression.\n * This provides a helpful API for paginating over FaunaDB responses.\n * @param expression {Expr}\n *   The Query expression to paginate over.\n * @param params {Object}\n *   Options to be passed to the paginate function. See [paginate](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * @param options {?Object}\n *   Object that configures the current pagination queries, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @returns {PageHelper} A PageHelper that wraps the provided expression.\n */\nClient.prototype.paginate = function(expression, params, options) {\n  params = util.defaults(params, {})\n  options = util.defaults(options, {})\n\n  return new PageHelper(this, expression, params, options)\n}\n\n/**\n * Sends a `ping` request to FaunaDB.\n * @return {external:Promise<string>} Ping response.\n */\nClient.prototype.ping = function(scope, timeout) {\n  return this._execute('GET', 'ping', null, { scope: scope, timeout: timeout })\n}\n\n/**\n * Get the freshest timestamp reported to this client.\n * @returns {number} the last seen transaction time\n */\nClient.prototype.getLastTxnTime = function() {\n  return this._http.getLastTxnTime()\n}\n\n/**\n * Sync the freshest timestamp seen by this client.\n *\n * This has no effect if staler than currently stored timestamp.\n * WARNING: This should be used only when coordinating timestamps across\n *          multiple clients. Moving the timestamp arbitrarily forward into\n *          the future will cause transactions to stall.\n * @param time {number} the last seen transaction time\n */\nClient.prototype.syncLastTxnTime = function(time) {\n  this._http.syncLastTxnTime(time)\n}\n\n/**\n * Closes the client session and cleans up any held resources.\n * By default, it will wait for any ongoing requests to complete on their own;\n * streaming requests are terminated forcibly. Any subsequent requests will\n * error after the .close method is called.\n * Should be used at application termination in order to release any open resources\n * and allow the process to terminate e.g. when the custom http2SessionIdleTime parameter is used.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Specifying this property will force any ongoing\n * requests to terminate instead of gracefully waiting until they complete.\n * This may result in an ERR_HTTP2_STREAM_CANCEL error for NodeJS.\n * @returns {Promise<void>}\n */\nClient.prototype.close = function(opts) {\n  return this._http.close(opts)\n}\n\nClient.prototype._execute = function(method, path, data, query, options) {\n  query = util.defaults(query, null)\n\n  if (\n    path instanceof values.Ref ||\n    util.checkInstanceHasProperty(path, '_isFaunaRef')\n  ) {\n    path = path.value\n  }\n\n  if (query !== null) {\n    query = util.removeUndefinedValues(query)\n  }\n\n  var startTime = Date.now()\n  var self = this\n  var body =\n    ['GET', 'HEAD'].indexOf(method) >= 0 ? undefined : JSON.stringify(data)\n\n  return this._http\n    .execute(\n      Object.assign({}, options, {\n        path: path,\n        query: query,\n        method: method,\n        body: body,\n      })\n    )\n    .then(function(response) {\n      var endTime = Date.now()\n      var responseObject = json.parseJSON(response.body)\n      var result = new RequestResult(\n        method,\n        path,\n        query,\n        body,\n        data,\n        response.body,\n        responseObject,\n        response.status,\n        response.headers,\n        startTime,\n        endTime\n      )\n      self._handleRequestResult(response, result, options)\n\n      return responseObject['resource']\n    })\n}\n\nClient.prototype._handleRequestResult = function(response, result, options) {\n  var txnTimeHeaderKey = 'x-txn-time'\n\n  if (response.headers[txnTimeHeaderKey] != null) {\n    this.syncLastTxnTime(parseInt(response.headers[txnTimeHeaderKey], 10))\n  }\n\n  var observers = [this._observer, options && options.observer]\n\n  observers.forEach(observer => {\n    if (typeof observer == 'function') {\n      observer(result, this)\n    }\n  })\n\n  errors.FaunaHTTPError.raiseForStatusCode(result)\n}\n\nfunction getHttp2SessionIdleTime() {\n  var fromEnv = util.getEnvVariable('FAUNADB_HTTP2_SESSION_IDLE_TIME')\n  var parsed =\n    // Allow either \"Infinity\" or parsable integer string.\n    fromEnv === 'Infinity' ? Infinity : parseInt(fromEnv, 10)\n  var useEnvVar = !isNaN(parsed)\n\n  return {\n    shouldOverride: useEnvVar,\n    value: useEnvVar ? parsed : 500,\n  }\n}\n\nmodule.exports = Client\nmodule.exports.resetNotifyAboutNewVersion = function() {\n  notifyAboutNewVersion = util.notifyAboutNewVersion()\n}\n", "'use strict'\n\nvar json = require('./_json')\n\n/**\n * Functions to assist with debug logging.\n * @module clientLogger\n */\n\n/**\n * A user provided log line handler.\n *\n * @callback loggerCallback\n * @param {string} logged\n */\n\n/**\n * Function that can be the `observer` for a {@link Client}.\n * Will call `loggerFunction` with a string representation of each {@link RequestResult}.\n *\n * An example logging string:\n * ```plain\n * Fauna POST /\n * Request JSON: {\n *   \"data\": ...\n * }\n * Response headers: {\n *    \"x-faunadb-host\": ...,\n *    \"x-faunadb-build\": ...,\n *    \"connection\": \"close\",\n *    \"content-length\": ...,\n *    \"content-type\": \"application/json;charset=utf-8\"\n *  }\n * Response JSON: {\n *    \"resource\": {\n *      \"ref\": { ... },\n *      \"class\": { ... },\n *      \"ts\": ...\n *    }\n *  }\n * Response (201): Network latency 13ms\n * ```\n *\n * @param {loggerCallback} loggerFunction\n * @return {Client~observerCallback}\n * @example\n * var client = new Client({\n *   ... other options ...\n *   observer: logger(console.log)\n * })\n * client.ping() // Logs the request and response.\n */\nfunction logger(loggerFunction) {\n  return function(requestResult, client) {\n    return loggerFunction(showRequestResult(requestResult), client)\n  }\n}\n\n/**\n * Convenience function used by {@link logger} to transform a {@link RequestResult}\n * to a string for logging.\n * @param {RequestResult} requestResult\n * @returns {string} string to be logged.\n */\nfunction showRequestResult(requestResult) {\n  var query = requestResult.query,\n    method = requestResult.method,\n    path = requestResult.path,\n    requestContent = requestResult.requestContent,\n    responseHeaders = requestResult.responseHeaders,\n    responseContent = requestResult.responseContent,\n    statusCode = requestResult.statusCode,\n    timeTaken = requestResult.timeTaken\n\n  var out = ''\n\n  function log(str) {\n    out = out + str\n  }\n\n  log('Fauna ' + method + ' /' + path + _queryString(query) + '\\n')\n  if (requestContent != null) {\n    log('  Request JSON: ' + _showJSON(requestContent) + '\\n')\n  }\n  log('  Response headers: ' + _showJSON(responseHeaders) + '\\n')\n  log('  Response JSON: ' + _showJSON(responseContent) + '\\n')\n  log('  Response (' + statusCode + '): Network latency ' + timeTaken + 'ms\\n')\n\n  return out\n}\n\nfunction _indent(str) {\n  var indentStr = '  '\n  return str.split('\\n').join('\\n' + indentStr)\n}\n\nfunction _showJSON(object) {\n  return _indent(json.toJSON(object, true))\n}\n\nfunction _queryString(query) {\n  if (query == null) {\n    return ''\n  }\n\n  var keys = Object.keys(query)\n  if (keys.length === 0) {\n    return ''\n  }\n\n  var pairs = keys.map(function(key) {\n    return key + '=' + query[key]\n  })\n  return '?' + pairs.join('&')\n}\n\nmodule.exports = {\n  logger: logger,\n  showRequestResult: showRequestResult,\n}\n", "var query = require('./src/query')\nvar util = require('./src/_util')\nvar parseJSON = require('./src/_json').parseJSON\n\nmodule.exports = util.mergeObjects(\n  {\n    Client: require('./src/Client'),\n    Expr: require('./src/Expr'),\n    PageHelper: require('./src/PageHelper'),\n    RequestResult: require('./src/RequestResult'),\n\n    clientLogger: require('./src/clientLogger'),\n    errors: require('./src/errors'),\n    values: require('./src/values'),\n    query: query,\n    parseJSON: parseJSON,\n  },\n  query\n)\n", "import chai from './index.js';\n\nexport const expect = chai.expect;\nexport const version = chai.version;\nexport const Assertion = chai.Assertion;\nexport const AssertionError = chai.AssertionError;\nexport const util = chai.util;\nexport const config = chai.config;\nexport const use = chai.use;\nexport const should = chai.should;\nexport const assert = chai.assert;\nexport const core = chai.core;\n\nexport default chai;\n", "import faunadb from \"faunadb\";\r\nimport { getGlobalState } from \"./fun/globalState\";\r\n\r\nclass GlobalModel {\r\n  #accessKeys = {\r\n    FAUNADB_SERVER_SECRET:\r\n      localStorage.getItem(\r\n        \"FAUNADB_SERVER_SECRET\"\r\n      ) as string,\r\n    FAUNADB_DOMAIN: \"db.us.fauna.com\",\r\n    MAPTILERKEY: localStorage.getItem(\r\n      \"MAPTILER_SERVER_SECRET\"\r\n    ) as string,\r\n  };\r\n\r\n  public readonly MAPTILERKEY =\r\n    this.#accessKeys.MAPTILERKEY;\r\n\r\n  public readonly CURRENT_USER =\r\n    localStorage.getItem(\"user\");\r\n\r\n  public readonly TAXRATE =\r\n    0.01 *\r\n    (getGlobalState<number>(\r\n      \"TAX_RATE\"\r\n    ) || 6.0);\r\n\r\n  public readonly BATCH_SIZE =\r\n    getGlobalState<number>(\r\n      \"BATCH_SIZE\"\r\n    ) || 1000;\r\n\r\n  public readonly primaryContact =\r\n    getGlobalState<{\r\n      companyName: string;\r\n      fullName: string;\r\n      addressLine1: string;\r\n      addressLine2: string;\r\n      telephone: string;\r\n    }>(\"primaryContact\") || {\r\n      companyName: \"Little Light Show\",\r\n      fullName: \"Nathan Alix\",\r\n      addressLine1: \"4 Andrea Lane\",\r\n      addressLine2:\r\n        \"Greenville, SC 29615\",\r\n      telephone: \"\",\r\n    };\r\n\r\n  constructor() {\r\n    if (\r\n      !this.#accessKeys\r\n        .FAUNADB_SERVER_SECRET\r\n    ) {\r\n      const secret =\r\n        prompt(\r\n          \"Provide the FAUNADB_SERVER_SECRET\"\r\n        ) || \"\";\r\n      this.#accessKeys.FAUNADB_SERVER_SECRET =\r\n        secret;\r\n      localStorage.setItem(\r\n        \"FAUNADB_SERVER_SECRET\",\r\n        secret\r\n      );\r\n    }\r\n  }\r\n\r\n  createClient() {\r\n    return new faunadb.Client({\r\n      secret:\r\n        this.#accessKeys\r\n          .FAUNADB_SERVER_SECRET,\r\n      domain:\r\n        this.#accessKeys.FAUNADB_DOMAIN,\r\n    });\r\n  }\r\n}\r\n\r\nexport const globals =\r\n  new GlobalModel();\r\n\r\nexport const createClient = () =>\r\n  globals.createClient();\r\n\r\nexport const isDebug =\r\n  location.href.includes(\"localhost\") ||\r\n  location.search.includes(\"debug\");\r\n\r\nexport const isOffline = () =>\r\n  true ===\r\n  getGlobalState<boolean>(\r\n    \"work_offline\"\r\n  );\r\n\r\nfunction isNetlifyBuildContext() {\r\n  return (\r\n    0 <=\r\n    location.href.indexOf(\"netlify\")\r\n  );\r\n}\r\n\r\nexport const CONTEXT =\r\n  isNetlifyBuildContext()\r\n    ? \"NETLIFY\"\r\n    : \"dev\";\r\n", "import { isDefined } from \"./get\";\n\nlet globalState: Record<string, any>;\nfunction forceGlobalState() {\n  return (globalState =\n    globalState ||\n    JSON.parse(\n      localStorage.getItem(\n        \"__GLOBAL_STATE__\"\n      ) || \"{}\"\n    ));\n}\n\nexport function setGlobalState(\n  key: string,\n  value: any\n): void;\nexport function setGlobalState(\n  key: Record<string, any>\n): void;\nexport function setGlobalState(\n  p1: any,\n  p2?: any\n): void {\n  if (\n    typeof p1 === \"string\" &&\n    isDefined(p2)\n  ) {\n    return setStateValue(p1, p2);\n  } else {\n    if (isDefined(p2))\n      throw \"unwanted parameter provided\";\n    Object.keys(p1).forEach((k) =>\n      setStateValue(k, p1[k])\n    );\n  }\n}\n\nfunction setStateValue(\n  key: string,\n  value: string\n) {\n  const state = forceGlobalState();\n  const [head, ...tail] =\n    key.split(\".\");\n  if (!tail.length) {\n    state[key] = value;\n  } else {\n    let o = (state[head] =\n      state[head] || {});\n    tail.forEach(\n      (k) => (o[k] = o[k] || {})\n    );\n    o[tail[tail.length - 1]] = value;\n  }\n  localStorage.setItem(\n    \"__GLOBAL_STATE__\",\n    JSON.stringify(state)\n  );\n}\n\nexport function getGlobalState<T>(\n  key: string\n): T | null {\n  const state = forceGlobalState();\n  const [head, ...tail] =\n    key.split(\".\");\n  if (!tail.length)\n    return state[head] as T;\n\n  let value = state[head];\n  if (\n    !!value &&\n    typeof value !== \"object\"\n  )\n    throw `key does not define an object: ${head}`;\n  tail.every(\n    (k) =>\n      typeof value === \"object\" &&\n      (value = value[k]) &&\n      true\n  );\n  return value;\n}\n", "import { isDebug } from \"../globals\";\n\nfunction log(...message: Array<any>) {\n  if (!isDebug) return;\n  console.log(...message);\n}\n\nexport function on(\n  domNode: Element,\n  eventName: string,\n  cb: () => void\n) {\n  domNode.addEventListener(\n    eventName,\n    cb\n  );\n}\n\nexport function trigger(\n  domNode: Element,\n  eventName: string\n) {\n  log(\"trigger\", eventName);\n  domNode.dispatchEvent(\n    new Event(eventName)\n  );\n}\n", "interface Dictionary<T> {\r\n  [index: string]: T;\r\n}\r\n\r\nfunction asStyle(o: any) {\r\n  if (typeof o === \"string\") return o;\r\n  return Object.keys(o)\r\n    .map((k) => `${k}:${o[k]}`)\r\n    .join(\";\");\r\n}\r\n\r\n/**\r\n * shallow copies b into a, preserving any existing values in a\r\n * @param a target\r\n * @param b values to copy into target if they are not already present\r\n */\r\nfunction defaults<A>(a: A, ...b: Partial<A>[]): A {\r\n  b.filter((b) => !!b).forEach((b) => {\r\n    Object.keys(b)\r\n      .filter((k) => (<any>a)[k] === undefined)\r\n      .forEach((k) => ((<any>a)[k] = (<any>b)[k]));\r\n  });\r\n  return a;\r\n}\r\n\r\nconst rules: Dictionary<(v: any) => string> = {\r\n  style: asStyle,\r\n};\r\n\r\nconst default_args = {\r\n  button: {\r\n    type: \"button\",\r\n  },\r\n};\r\n\r\ntype Args = Dictionary<string | Function | Dictionary<string>>;\r\ntype ChildTypes = HTMLElement | string;\r\ntype ChildrenCollection = [ChildTypes | Array<ChildTypes>][];\r\ntype Widget = { setContent: Function; addChild: Function };\r\ntype WidgetFactory = (args: Args) => Widget;\r\n\r\n/**\r\n * This is a react.CreateElement implementation\r\n * import dom as the value in the tsconfig.json \"jsxFactory\"\r\n * @param tag\r\n * @param args\r\n * @param children\r\n */\r\nexport function dom(\r\n  tag: string,\r\n  args?: Args,\r\n  ...children: ChildrenCollection\r\n): HTMLElement;\r\nexport function dom(\r\n  tag: string | WidgetFactory,\r\n  args?: Args,\r\n  ...children: ChildrenCollection\r\n): HTMLElement | string | Widget;\r\nexport function dom(\r\n  tag: string | WidgetFactory,\r\n  args?: Args,\r\n  ...children: ChildrenCollection\r\n): HTMLElement | string | Widget {\r\n  if (typeof tag === \"string\") {\r\n    let element = document.createElement(tag);\r\n    if (default_args[tag]) {\r\n      args = defaults(args ?? {}, default_args[tag]);\r\n    }\r\n    if (args) {\r\n      Object.keys(args).forEach((key) => {\r\n        let value = rules[key] ? rules[key](args![key]) : args![key];\r\n        if (typeof value === \"string\") {\r\n          //if (key === \"class\") key = \"className\";\r\n          element.setAttribute(key, value);\r\n        } else if (value instanceof Function) {\r\n          element.addEventListener(<any>key, <any>value);\r\n        } else {\r\n          element.setAttribute(key, value + \"\");\r\n        }\r\n      });\r\n    }\r\n\r\n    let addChildren = (children: ChildrenCollection) => {\r\n      children &&\r\n        children.forEach((c) => {\r\n          if (typeof c === \"string\") {\r\n            element.appendChild(document.createTextNode(c));\r\n          } else if (c instanceof HTMLElement) {\r\n            element.appendChild(c);\r\n          } else if (c instanceof Array) {\r\n            addChildren(<ChildrenCollection>(<unknown>c));\r\n          } else {\r\n            console.log(\"addChildren cannot add to dom node\", c);\r\n          }\r\n        });\r\n    };\r\n\r\n    children && addChildren(children);\r\n\r\n    return element;\r\n  }\r\n\r\n  {\r\n    let element = tag(args!);\r\n\r\n    let addChildren = (children: ChildrenCollection) => {\r\n      children &&\r\n        children.forEach((c) => {\r\n          if (typeof c === \"string\" || c instanceof HTMLElement) {\r\n            element.setContent(c);\r\n          } else if (c instanceof Array) {\r\n            addChildren(<ChildrenCollection>(<unknown>c));\r\n          } else if (typeof c === \"object\") {\r\n            element.addChild(c);\r\n          } else {\r\n            console.log(\"addChildren cannot add to widget\", c);\r\n          }\r\n        });\r\n    };\r\n\r\n    children && addChildren(children);\r\n    return element;\r\n  }\r\n}\r\n", "export function moveChildren(\r\n  items: HTMLElement,\r\n  report: HTMLElement\r\n) {\r\n  while (items.firstChild)\r\n    report.appendChild(\r\n      items.firstChild\r\n    );\r\n}\r\n\r\nexport function moveChildrenBefore(\r\n  items: Element,\r\n  report: Element\r\n) {\r\n  while (items.firstChild)\r\n    report.before(items.firstChild);\r\n}\r\n\r\nexport function moveChildrenAfter(\r\n  items: Element,\r\n  report: Element\r\n) {\r\n  let head = report;\r\n  while (items.firstChild) {\r\n    const firstChild = items.firstChild;\r\n    head.after(firstChild);\r\n    head = firstChild as HTMLElement;\r\n  }\r\n}\r\n", "import { on } from \"../on.js\";\n\nexport function selectOnFocus(\n  element:\n    | HTMLInputElement\n    | HTMLTextAreaElement\n) {\n  on(element, \"focus\", () =>\n    element.select()\n  );\n}\n\nexport function formatAsCurrency(\n  input: HTMLInputElement\n) {\n  const doit = () => {\n    const textValue = input.value;\n    const numericValue =\n      input.valueAsNumber?.toFixed(2);\n    if (textValue != numericValue) {\n      input.value = numericValue;\n    }\n  };\n\n  input.step = \"0.01\";\n  input.addEventListener(\n    \"change\",\n    doit\n  );\n  doit();\n}\n\nexport function formatUppercase(\n  input: HTMLInputElement\n) {\n  addFormatter(() => {\n    const textValue = (\n      input.value || \"\"\n    ).toUpperCase();\n    if (textValue != input.value) {\n      input.value = textValue;\n    }\n  }, input);\n}\n\nfunction addFormatter(\n  change: () => void,\n  input: HTMLInputElement\n) {\n  change();\n\n  input.addEventListener(\n    \"change\",\n    change\n  );\n}\n\nexport function formatTrim(\n  input: HTMLInputElement\n) {\n  addFormatter(() => {\n    const textValue = (\n      input.value || \"\"\n    ).trim();\n    if (textValue != input.value) {\n      input.value = textValue;\n    }\n  }, input);\n}\n\nexport function getValueAsNumber(\n  input: HTMLInputElement\n) {\n  if (!input.value) return 0;\n  return input.valueAsNumber;\n}\n", "import {\n  formatAsCurrency,\n  formatTrim,\n  formatUppercase,\n  selectOnFocus,\n} from \"./input\";\n\nexport function extendNumericInputBehaviors(\n  form: HTMLElement\n) {\n  const numberInput = Array.from(\n    form.querySelectorAll(\n      \"input[type=number]\"\n    )\n  ) as Array<HTMLInputElement>;\n  numberInput.forEach(selectOnFocus);\n\n  const currencyInput =\n    numberInput.filter((i) =>\n      i.classList.contains(\"currency\")\n    );\n  currencyInput.forEach(\n    formatAsCurrency\n  );\n}\n\nexport function extendTextInputBehaviors(\n  form: HTMLElement\n) {\n  const textInput = Array.from(\n    form.querySelectorAll(\n      \"input[type=text],input[type=email],input[type=tel]\"\n    )\n  ) as Array<HTMLInputElement>;\n  textInput.forEach(selectOnFocus);\n\n  textInput\n    .filter((i) =>\n      i.classList.contains(\"trim\")\n    )\n    .forEach(formatTrim);\n\n  textInput\n    .filter((i) =>\n      i.classList.contains(\"uppercase\")\n    )\n    .forEach(formatUppercase);\n}\n", "function sleep(ms: number) {\n  return new Promise<void>(\n    (good, bad) => {\n      setTimeout(() => good(), ms);\n    }\n  );\n}\n\nimport { assert } from \"chai\";\nimport {\n  on,\n  trigger,\n} from \"../../app/fun/on.js\";\nimport { dom } from \"../../app/dom.js\";\n\nimport {\n  moveChildren,\n  moveChildrenAfter,\n  moveChildrenBefore,\n} from \"../../app/fun/dom\";\n\nimport { extendTextInputBehaviors } from \"../../app/fun/behavior/form\";\n\ndescribe(\"tests fun/behavior/form\", () => {\n  it(\"tests extendTextInputBehaviors\", async () => {\n    const element = dom(\"form\");\n    const input = dom(\"input\", {\n      type: \"text\",\n      class: \"trim uppercase\",\n    }) as HTMLInputElement;\n    document.body.appendChild(element);\n    element.appendChild(input);\n    input.value = \" input value \";\n    extendTextInputBehaviors(element);\n    assert.equal(\n      input.value,\n      \"INPUT VALUE\"\n    );\n\n    await sleep(100);\n    input.focus();\n\n    assert.equal(\n      input.selectionStart,\n      0,\n      \"start\"\n    );\n\n    assert.equal(\n      input.selectionEnd,\n      11,\n      \"end\"\n    );\n\n    element.remove();\n  });\n});\n\ndescribe(\"tests on/trigger\", () => {\n  it(\"tests on/trigger\", () => {\n    const element = dom(\"div\");\n    let counter = 0;\n    on(\n      element,\n      \"topic-1\",\n      () => counter++\n    );\n    trigger(element, \"topic-1\");\n    assert.equal(counter, 1);\n  });\n});\n\ndescribe(\"tests moveChildren\", () => {\n  it(\"tests moveChildren\", () => {\n    const source = dom(\"div\");\n    const target = dom(\"div\");\n    const child = dom(\"div\");\n    source.appendChild(child);\n    moveChildren(source, target);\n    assert.equal(\n      child.parentElement,\n      target\n    );\n  });\n\n  it(\"tests moveChildrenAfter\", () => {\n    const source = dom(\"div\");\n    const target = dom(\"div\");\n    const child = dom(\"div\");\n    source.appendChild(child);\n    const placeholder = dom(\"div\");\n    target.appendChild(placeholder);\n    moveChildrenAfter(\n      source,\n      placeholder\n    );\n    assert.equal(\n      child.parentElement,\n      target\n    );\n    assert.equal(\n      placeholder.nextElementSibling,\n      child\n    );\n  });\n\n  it(\"tests moveChildrenBefore\", () => {\n    const source = dom(\"div\");\n    const target = dom(\"div\");\n    const child = dom(\"div\");\n    source.appendChild(child);\n    const placeholder = dom(\"div\");\n    target.appendChild(placeholder);\n    moveChildrenBefore(\n      source,\n      placeholder\n    );\n    assert.equal(\n      child.parentElement,\n      target\n    );\n    assert.equal(\n      placeholder.previousElementSibling,\n      child\n    );\n  });\n});\n\nimport {\n  formatAsCurrency,\n  formatTrim,\n  formatUppercase,\n  getValueAsNumber,\n  selectOnFocus,\n} from \"../../app/fun/behavior/input\";\n\ndescribe(\"tests fun/behavior/input\", () => {\n  it(\"tests formatAsCurrency\", () => {\n    const input = dom(\"input\", {\n      type: \"number\",\n    }) as HTMLInputElement;\n    input.value = \"1\";\n    formatAsCurrency(input);\n    assert.equal(input.value, \"1.00\");\n    input.valueAsNumber = 1.234;\n    trigger(input, \"change\");\n    assert.equal(input.value, \"1.23\");\n  });\n\n  it(\"tests formatTrim\", () => {\n    const input = dom(\"input\", {\n      type: \"text\",\n    }) as HTMLInputElement;\n    input.value = \" one \";\n    formatTrim(input);\n    assert.equal(input.value, \"one\");\n  });\n\n  it(\"tests formatUppercase\", () => {\n    const input = dom(\"input\", {\n      type: \"text\",\n    }) as HTMLInputElement;\n    input.value = \"one\";\n    formatUppercase(input);\n    assert.equal(input.value, \"ONE\");\n  });\n\n  it(\"tests getValueAsNumber\", () => {\n    const input = dom(\"input\", {\n      type: \"number\",\n    }) as HTMLInputElement;\n    input.value = \"1.25\";\n    const value =\n      getValueAsNumber(input);\n    assert.equal(value, 1.25);\n  });\n\n  it(\"tests selectOnFocus\", async () => {\n    const input = dom(\"input\", {\n      type: \"text\",\n    }) as HTMLInputElement;\n    document.body.appendChild(input);\n    input.value = \"X\";\n    selectOnFocus(input);\n    input.focus();\n    await sleep(10);\n    assert.equal(input.selectionEnd, 1);\n    input.remove();\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
